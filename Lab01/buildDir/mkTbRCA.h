/*
 * Generated by Bluespec Compiler (build 14ff62d)
 * 
 * On Wed Jun 21 21:04:02 CST 2023
 * 
 */

/* Generation options: */
#ifndef __mkTbRCA_h__
#define __mkTbRCA_h__

#include "bluesim_types.h"
#include "bs_module.h"
#include "bluesim_primitives.h"
#include "bs_vcd.h"


/* Class declaration for the mkTbRCA module */
class MOD_mkTbRCA : public Module {
 
 /* Clock handles */
 private:
  tClock __clk_handle_0;
 
 /* Clock gate handles */
 public:
  tUInt8 *clk_gate[0];
 
 /* Instantiation parameters */
 public:
 
 /* Module state */
 public:
  MOD_Reg<tUInt32> INST_cycle;
  MOD_Wire<tUInt8> INST_randomVal1_ignore;
  MOD_Reg<tUInt8> INST_randomVal1_initialized;
  MOD_Wire<tUInt8> INST_randomVal1_zaz;
  MOD_Wire<tUInt8> INST_randomVal2_ignore;
  MOD_Reg<tUInt8> INST_randomVal2_initialized;
  MOD_Wire<tUInt8> INST_randomVal2_zaz;
 
 /* Constructor */
 public:
  MOD_mkTbRCA(tSimStateHdl simHdl, char const *name, Module *parent);
 
 /* Symbol init methods */
 private:
  void init_symbols_0();
 
 /* Reset signal definitions */
 private:
  tUInt8 PORT_RST_N;
 
 /* Port definitions */
 public:
 
 /* Publicly accessible definitions */
 public:
  tUInt32 DEF_x__h960;
  tUInt8 DEF_cycle_5_EQ_128___d17;
  tUInt8 DEF_cycle_5_EQ_0___d16;
 
 /* Local definitions */
 private:
  tUInt32 DEF_v__h704;
  tUInt32 DEF_v__h315;
  tUInt8 DEF_x_wget__h647;
  tUInt8 DEF_x_wget__h250;
  tUInt8 DEF_v__h396;
  tUInt8 DEF_v__h784;
 
 /* Rules */
 public:
  void RL_randomVal1_every();
  void RL_randomVal1_every_1();
  void RL_randomVal2_every();
  void RL_randomVal2_every_1();
  void RL_test();
 
 /* Methods */
 public:
 
 /* Reset routines */
 public:
  void reset_RST_N(tUInt8 ARG_rst_in);
 
 /* Static handles to reset routines */
 public:
 
 /* Pointers to reset fns in parent module for asserting output resets */
 private:
 
 /* Functions for the parent module to register its reset fns */
 public:
 
 /* Functions to set the elaborated clock id */
 public:
  void set_clk_0(char const *s);
 
 /* State dumping routine */
 public:
  void dump_state(unsigned int indent);
 
 /* VCD dumping routines */
 public:
  unsigned int dump_VCD_defs(unsigned int levels);
  void dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkTbRCA &backing);
  void vcd_defs(tVCDDumpType dt, MOD_mkTbRCA &backing);
  void vcd_prims(tVCDDumpType dt, MOD_mkTbRCA &backing);
};

#endif /* ifndef __mkTbRCA_h__ */
