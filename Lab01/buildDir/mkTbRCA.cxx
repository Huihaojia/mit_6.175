/*
 * Generated by Bluespec Compiler (build 14ff62d)
 * 
 * On Wed Jun 21 21:04:02 CST 2023
 * 
 */
#include "bluesim_primitives.h"
#include "mkTbRCA.h"
#include "imported_BDPI_functions.h"


/* String declarations */
static std::string const __str_literal_2("FAILED %d + %d gave %d instead of %d", 36u);
static std::string const __str_literal_1("PASSED", 6u);


/* Constructor */
MOD_mkTbRCA::MOD_mkTbRCA(tSimStateHdl simHdl, char const *name, Module *parent)
  : Module(simHdl, name, parent),
    __clk_handle_0(BAD_CLOCK_HANDLE),
    INST_cycle(simHdl, "cycle", this, 32u, 0u, (tUInt8)0u),
    INST_randomVal1_ignore(simHdl, "randomVal1_ignore", this, 8u, (tUInt8)0u),
    INST_randomVal1_initialized(simHdl, "randomVal1_initialized", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_randomVal1_zaz(simHdl, "randomVal1_zaz", this, 8u, (tUInt8)0u),
    INST_randomVal2_ignore(simHdl, "randomVal2_ignore", this, 8u, (tUInt8)0u),
    INST_randomVal2_initialized(simHdl, "randomVal2_initialized", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_randomVal2_zaz(simHdl, "randomVal2_zaz", this, 8u, (tUInt8)0u),
    PORT_RST_N((tUInt8)1u),
    DEF_v__h704(2863311530u),
    DEF_v__h315(2863311530u)
{
  symbol_count = 13u;
  symbols = new tSym[symbol_count];
  init_symbols_0();
}


/* Symbol init fns */

void MOD_mkTbRCA::init_symbols_0()
{
  init_symbol(&symbols[0u], "cycle", SYM_MODULE, &INST_cycle);
  init_symbol(&symbols[1u], "RL_randomVal1_every", SYM_RULE);
  init_symbol(&symbols[2u], "RL_randomVal1_every_1", SYM_RULE);
  init_symbol(&symbols[3u], "RL_randomVal2_every", SYM_RULE);
  init_symbol(&symbols[4u], "RL_randomVal2_every_1", SYM_RULE);
  init_symbol(&symbols[5u], "RL_test", SYM_RULE);
  init_symbol(&symbols[6u], "randomVal1_ignore", SYM_MODULE, &INST_randomVal1_ignore);
  init_symbol(&symbols[7u], "randomVal1_initialized", SYM_MODULE, &INST_randomVal1_initialized);
  init_symbol(&symbols[8u], "randomVal1_zaz", SYM_MODULE, &INST_randomVal1_zaz);
  init_symbol(&symbols[9u], "randomVal2_ignore", SYM_MODULE, &INST_randomVal2_ignore);
  init_symbol(&symbols[10u], "randomVal2_initialized", SYM_MODULE, &INST_randomVal2_initialized);
  init_symbol(&symbols[11u], "randomVal2_zaz", SYM_MODULE, &INST_randomVal2_zaz);
  init_symbol(&symbols[12u], "x__h960", SYM_DEF, &DEF_x__h960, 32u);
}


/* Rule actions */

void MOD_mkTbRCA::RL_randomVal1_every()
{
  tUInt8 DEF_new_value__h357;
  if (!(PORT_RST_N == (tUInt8)0u))
    DEF_v__h315 = rand32();
  DEF_new_value__h357 = (tUInt8)((tUInt8)255u & DEF_v__h315);
  INST_randomVal1_zaz.METH_wset(DEF_new_value__h357);
}

void MOD_mkTbRCA::RL_randomVal1_every_1()
{
  DEF_x_wget__h250 = INST_randomVal1_zaz.METH_wget();
  DEF_v__h396 = INST_randomVal1_zaz.METH_whas() ? DEF_x_wget__h250 : (tUInt8)0u;
  INST_randomVal1_ignore.METH_wset(DEF_v__h396);
}

void MOD_mkTbRCA::RL_randomVal2_every()
{
  tUInt8 DEF_new_value__h746;
  if (!(PORT_RST_N == (tUInt8)0u))
    DEF_v__h704 = rand32();
  DEF_new_value__h746 = (tUInt8)((tUInt8)255u & DEF_v__h704);
  INST_randomVal2_zaz.METH_wset(DEF_new_value__h746);
}

void MOD_mkTbRCA::RL_randomVal2_every_1()
{
  DEF_x_wget__h647 = INST_randomVal2_zaz.METH_wget();
  DEF_v__h784 = INST_randomVal2_zaz.METH_whas() ? DEF_x_wget__h647 : (tUInt8)0u;
  INST_randomVal2_ignore.METH_wset(DEF_v__h784);
}

void MOD_mkTbRCA::RL_test()
{
  tUInt8 DEF_high__h1142;
  tUInt32 DEF_x__h3391;
  tUInt8 DEF_y__h1866;
  tUInt8 DEF_x__h1865;
  tUInt8 DEF_y__h1645;
  tUInt8 DEF_x__h1644;
  tUInt8 DEF_y__h1643;
  tUInt8 DEF_x__h1642;
  tUInt8 DEF_y__h1756;
  tUInt8 DEF_x__h1755;
  tUInt8 DEF_y__h1754;
  tUInt8 DEF_y__h1864;
  tUInt8 DEF_x__h1863;
  tUInt8 DEF_y__h2370;
  tUInt8 DEF_x__h2369;
  tUInt8 DEF_y__h2368;
  tUInt8 DEF_x__h2367;
  tUInt8 DEF_y__h2521;
  tUInt8 DEF_x__h2520;
  tUInt8 DEF_y__h2519;
  tUInt8 DEF_x__h2518;
  tUInt8 DEF_y__h2631;
  tUInt8 DEF_x__h2630;
  tUInt8 DEF_y__h2629;
  tUInt8 DEF_x__h2628;
  tUInt8 DEF_y__h2741;
  tUInt8 DEF_x__h2740;
  tUInt8 DEF_y__h2739;
  tUInt8 DEF_x__h2738;
  tUInt8 DEF_c__h2727;
  tUInt8 DEF_x__h2904;
  tUInt8 DEF_c__h2617;
  tUInt8 DEF_x__h2981;
  tUInt8 DEF_c__h2507;
  tUInt8 DEF_x__h3058;
  tUInt8 DEF_x__h3135;
  tUInt8 DEF_c__h1852;
  tUInt8 DEF_x__h2029;
  tUInt8 DEF_c__h1742;
  tUInt8 DEF_x__h2106;
  tUInt8 DEF_x__h2183;
  tUInt8 DEF_NOT_cycle_5_EQ_0_6_1_AND_NOT_cycle_5_EQ_128_7__ETC___d104;
  tUInt32 DEF_realAns__h3225;
  tUInt8 DEF_c__h1631;
  tUInt8 DEF_c__h2356;
  tUInt8 DEF_b__h1482;
  tUInt8 DEF_b__h1630;
  tUInt8 DEF_b__h1741;
  tUInt8 DEF_b__h1851;
  tUInt8 DEF_b__h2355;
  tUInt8 DEF_b__h2506;
  tUInt8 DEF_b__h2616;
  tUInt8 DEF_b__h2726;
  tUInt8 DEF_a__h1481;
  tUInt8 DEF_a__h1629;
  tUInt8 DEF_a__h1740;
  tUInt8 DEF_a__h1850;
  tUInt8 DEF_a__h2354;
  tUInt8 DEF_a__h2505;
  tUInt8 DEF_a__h2615;
  tUInt8 DEF_a__h2725;
  tUInt8 DEF_x__h1753;
  tUInt32 DEF_v__h1137;
  DEF_x__h960 = INST_cycle.METH_read();
  DEF_x_wget__h647 = INST_randomVal2_zaz.METH_wget();
  DEF_x_wget__h250 = INST_randomVal1_zaz.METH_wget();
  DEF_v__h396 = INST_randomVal1_zaz.METH_whas() ? DEF_x_wget__h250 : (tUInt8)0u;
  DEF_v__h784 = INST_randomVal2_zaz.METH_whas() ? DEF_x_wget__h647 : (tUInt8)0u;
  DEF_cycle_5_EQ_128___d17 = DEF_x__h960 == 128u;
  DEF_cycle_5_EQ_0___d16 = DEF_x__h960 == 0u;
  DEF_a__h2725 = (tUInt8)(DEF_v__h396 >> 7u);
  DEF_a__h2615 = (tUInt8)((tUInt8)1u & (DEF_v__h396 >> 6u));
  DEF_a__h2505 = (tUInt8)((tUInt8)1u & (DEF_v__h396 >> 5u));
  DEF_a__h2354 = (tUInt8)((tUInt8)1u & (DEF_v__h396 >> 4u));
  DEF_a__h1850 = (tUInt8)((tUInt8)1u & (DEF_v__h396 >> 3u));
  DEF_a__h1740 = (tUInt8)((tUInt8)1u & (DEF_v__h396 >> 2u));
  DEF_b__h2726 = (tUInt8)(DEF_v__h784 >> 7u);
  DEF_a__h1629 = (tUInt8)((tUInt8)1u & (DEF_v__h396 >> 1u));
  DEF_b__h2616 = (tUInt8)((tUInt8)1u & (DEF_v__h784 >> 6u));
  DEF_a__h1481 = (tUInt8)((tUInt8)1u & DEF_v__h396);
  DEF_b__h2506 = (tUInt8)((tUInt8)1u & (DEF_v__h784 >> 5u));
  DEF_b__h2355 = (tUInt8)((tUInt8)1u & (DEF_v__h784 >> 4u));
  DEF_b__h1851 = (tUInt8)((tUInt8)1u & (DEF_v__h784 >> 3u));
  DEF_b__h1630 = (tUInt8)((tUInt8)1u & (DEF_v__h784 >> 1u));
  DEF_b__h1741 = (tUInt8)((tUInt8)1u & (DEF_v__h784 >> 2u));
  DEF_b__h1482 = (tUInt8)((tUInt8)1u & DEF_v__h784);
  DEF_c__h1631 = (tUInt8)((tUInt8)1u & ((DEF_a__h1481 & DEF_b__h1482 ? (tUInt8)2u : (tUInt8)0u) >> 1u));
  DEF_realAns__h3225 = 511u & ((511u & ((((tUInt32)((tUInt8)0u)) << 8u) | (tUInt32)(DEF_v__h396))) + (511u & ((((tUInt32)((tUInt8)0u)) << 8u) | (tUInt32)(DEF_v__h784))));
  DEF_x__h2183 = DEF_a__h1629 ^ DEF_b__h1630;
  DEF_x__h2106 = DEF_a__h1740 ^ DEF_b__h1741;
  DEF_x__h2029 = DEF_a__h1850 ^ DEF_b__h1851;
  DEF_x__h3058 = DEF_a__h2505 ^ DEF_b__h2506;
  DEF_x__h3135 = DEF_a__h2354 ^ DEF_b__h2355;
  DEF_x__h2981 = DEF_a__h2615 ^ DEF_b__h2616;
  DEF_x__h2904 = DEF_a__h2725 ^ DEF_b__h2726;
  DEF_x__h2740 = DEF_a__h2725 & DEF_b__h2726;
  DEF_x__h2630 = DEF_a__h2615 & DEF_b__h2616;
  DEF_x__h2520 = DEF_a__h2505 & DEF_b__h2506;
  DEF_x__h2369 = DEF_a__h2354 & DEF_b__h2355;
  DEF_x__h1755 = DEF_a__h1740 & DEF_b__h1741;
  DEF_y__h1643 = DEF_b__h1630 & DEF_c__h1631;
  DEF_x__h1644 = DEF_a__h1629 & DEF_b__h1630;
  DEF_y__h1645 = DEF_a__h1629 & DEF_c__h1631;
  DEF_x__h1642 = DEF_x__h1644 | DEF_y__h1645;
  DEF_c__h1742 = DEF_x__h1642 | DEF_y__h1643;
  DEF_y__h1754 = DEF_b__h1741 & DEF_c__h1742;
  DEF_y__h1756 = DEF_a__h1740 & DEF_c__h1742;
  DEF_x__h1753 = DEF_x__h1755 | DEF_y__h1756;
  DEF_c__h1852 = DEF_x__h1753 | DEF_y__h1754;
  DEF_y__h1864 = DEF_b__h1851 & DEF_c__h1852;
  DEF_x__h1865 = DEF_a__h1850 & DEF_b__h1851;
  DEF_y__h1866 = DEF_a__h1850 & DEF_c__h1852;
  DEF_x__h1863 = DEF_x__h1865 | DEF_y__h1866;
  DEF_c__h2356 = (tUInt8)((tUInt8)1u & (DEF_x__h1863 | DEF_y__h1864 ? (tUInt8)1u : (tUInt8)0u));
  DEF_y__h2368 = DEF_b__h2355 & DEF_c__h2356;
  DEF_y__h2370 = DEF_a__h2354 & DEF_c__h2356;
  DEF_x__h2367 = DEF_x__h2369 | DEF_y__h2370;
  DEF_c__h2507 = DEF_x__h2367 | DEF_y__h2368;
  DEF_y__h2519 = DEF_b__h2506 & DEF_c__h2507;
  DEF_y__h2521 = DEF_a__h2505 & DEF_c__h2507;
  DEF_x__h2518 = DEF_x__h2520 | DEF_y__h2521;
  DEF_c__h2617 = DEF_x__h2518 | DEF_y__h2519;
  DEF_y__h2629 = DEF_b__h2616 & DEF_c__h2617;
  DEF_y__h2631 = DEF_a__h2615 & DEF_c__h2617;
  DEF_x__h2628 = DEF_x__h2630 | DEF_y__h2631;
  DEF_c__h2727 = DEF_x__h2628 | DEF_y__h2629;
  DEF_y__h2739 = DEF_b__h2726 & DEF_c__h2727;
  DEF_y__h2741 = DEF_a__h2725 & DEF_c__h2727;
  DEF_x__h2738 = DEF_x__h2740 | DEF_y__h2741;
  DEF_x__h3391 = DEF_x__h960 + 1u;
  DEF_high__h1142 = (tUInt8)31u & ((((((DEF_x__h2738 | DEF_y__h2739) << 4u) | ((DEF_x__h2904 ^ DEF_c__h2727) << 3u)) | ((DEF_x__h2981 ^ DEF_c__h2617) << 2u)) | ((DEF_x__h3058 ^ DEF_c__h2507) << 1u)) | (DEF_x__h3135 ^ DEF_c__h2356));
  DEF_v__h1137 = 511u & (((((((tUInt32)(DEF_high__h1142)) << 4u) | (((tUInt32)(DEF_x__h2029 ^ DEF_c__h1852)) << 3u)) | (((tUInt32)(DEF_x__h2106 ^ DEF_c__h1742)) << 2u)) | (((tUInt32)(DEF_x__h2183 ^ DEF_c__h1631)) << 1u)) | (tUInt32)(DEF_a__h1481 ^ DEF_b__h1482));
  DEF_NOT_cycle_5_EQ_0_6_1_AND_NOT_cycle_5_EQ_128_7__ETC___d104 = !DEF_cycle_5_EQ_0___d16 && (!DEF_cycle_5_EQ_128___d17 && !(DEF_v__h1137 == DEF_realAns__h3225));
  if (DEF_cycle_5_EQ_0___d16)
    INST_randomVal1_initialized.METH_write((tUInt8)1u);
  if (DEF_cycle_5_EQ_0___d16)
    INST_randomVal2_initialized.METH_write((tUInt8)1u);
  if (!(PORT_RST_N == (tUInt8)0u))
  {
    if (DEF_cycle_5_EQ_128___d17)
      dollar_display(sim_hdl, this, "s", &__str_literal_1);
    if (DEF_cycle_5_EQ_128___d17)
      dollar_finish(sim_hdl, "32", 1u);
    if (DEF_NOT_cycle_5_EQ_0_6_1_AND_NOT_cycle_5_EQ_128_7__ETC___d104)
      dollar_display(sim_hdl,
		     this,
		     "s,8,8,9,9",
		     &__str_literal_2,
		     DEF_v__h396,
		     DEF_v__h784,
		     DEF_v__h1137,
		     DEF_realAns__h3225);
    if (DEF_NOT_cycle_5_EQ_0_6_1_AND_NOT_cycle_5_EQ_128_7__ETC___d104)
      dollar_finish(sim_hdl, "32", 1u);
  }
  INST_cycle.METH_write(DEF_x__h3391);
}


/* Methods */


/* Reset routines */

void MOD_mkTbRCA::reset_RST_N(tUInt8 ARG_rst_in)
{
  PORT_RST_N = ARG_rst_in;
  INST_randomVal2_initialized.reset_RST(ARG_rst_in);
  INST_randomVal1_initialized.reset_RST(ARG_rst_in);
  INST_cycle.reset_RST(ARG_rst_in);
}


/* Static handles to reset routines */


/* Functions for the parent module to register its reset fns */


/* Functions to set the elaborated clock id */

void MOD_mkTbRCA::set_clk_0(char const *s)
{
  __clk_handle_0 = bk_get_or_define_clock(sim_hdl, s);
}


/* State dumping routine */
void MOD_mkTbRCA::dump_state(unsigned int indent)
{
  printf("%*s%s:\n", indent, "", inst_name);
  INST_cycle.dump_state(indent + 2u);
  INST_randomVal1_ignore.dump_state(indent + 2u);
  INST_randomVal1_initialized.dump_state(indent + 2u);
  INST_randomVal1_zaz.dump_state(indent + 2u);
  INST_randomVal2_ignore.dump_state(indent + 2u);
  INST_randomVal2_initialized.dump_state(indent + 2u);
  INST_randomVal2_zaz.dump_state(indent + 2u);
}


/* VCD dumping routines */

unsigned int MOD_mkTbRCA::dump_VCD_defs(unsigned int levels)
{
  vcd_write_scope_start(sim_hdl, inst_name);
  vcd_num = vcd_reserve_ids(sim_hdl, 17u);
  unsigned int num = vcd_num;
  for (unsigned int clk = 0u; clk < bk_num_clocks(sim_hdl); ++clk)
    vcd_add_clock_def(sim_hdl, this, bk_clock_name(sim_hdl, clk), bk_clock_vcd_num(sim_hdl, clk));
  vcd_write_def(sim_hdl, bk_clock_vcd_num(sim_hdl, __clk_handle_0), "CLK", 1u);
  vcd_write_def(sim_hdl, num++, "RST_N", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "cycle_5_EQ_0___d16", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "cycle_5_EQ_128___d17", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "v__h315", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "v__h396", 8u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "v__h704", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "v__h784", 8u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "x__h960", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "x_wget__h250", 8u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "x_wget__h647", 8u);
  num = INST_cycle.dump_VCD_defs(num);
  num = INST_randomVal1_ignore.dump_VCD_defs(num);
  num = INST_randomVal1_initialized.dump_VCD_defs(num);
  num = INST_randomVal1_zaz.dump_VCD_defs(num);
  num = INST_randomVal2_ignore.dump_VCD_defs(num);
  num = INST_randomVal2_initialized.dump_VCD_defs(num);
  num = INST_randomVal2_zaz.dump_VCD_defs(num);
  vcd_write_scope_end(sim_hdl);
  return num;
}

void MOD_mkTbRCA::dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkTbRCA &backing)
{
  vcd_defs(dt, backing);
  vcd_prims(dt, backing);
}

void MOD_mkTbRCA::vcd_defs(tVCDDumpType dt, MOD_mkTbRCA &backing)
{
  unsigned int num = vcd_num;
  if (dt == VCD_DUMP_XS)
  {
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 8u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 8u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 8u);
    vcd_write_x(sim_hdl, num++, 8u);
  }
  else
    if (dt == VCD_DUMP_CHANGES)
    {
      if ((backing.PORT_RST_N) != PORT_RST_N)
      {
	vcd_write_val(sim_hdl, num, PORT_RST_N, 1u);
	backing.PORT_RST_N = PORT_RST_N;
      }
      ++num;
      if ((backing.DEF_cycle_5_EQ_0___d16) != DEF_cycle_5_EQ_0___d16)
      {
	vcd_write_val(sim_hdl, num, DEF_cycle_5_EQ_0___d16, 1u);
	backing.DEF_cycle_5_EQ_0___d16 = DEF_cycle_5_EQ_0___d16;
      }
      ++num;
      if ((backing.DEF_cycle_5_EQ_128___d17) != DEF_cycle_5_EQ_128___d17)
      {
	vcd_write_val(sim_hdl, num, DEF_cycle_5_EQ_128___d17, 1u);
	backing.DEF_cycle_5_EQ_128___d17 = DEF_cycle_5_EQ_128___d17;
      }
      ++num;
      if ((backing.DEF_v__h315) != DEF_v__h315)
      {
	vcd_write_val(sim_hdl, num, DEF_v__h315, 32u);
	backing.DEF_v__h315 = DEF_v__h315;
      }
      ++num;
      if ((backing.DEF_v__h396) != DEF_v__h396)
      {
	vcd_write_val(sim_hdl, num, DEF_v__h396, 8u);
	backing.DEF_v__h396 = DEF_v__h396;
      }
      ++num;
      if ((backing.DEF_v__h704) != DEF_v__h704)
      {
	vcd_write_val(sim_hdl, num, DEF_v__h704, 32u);
	backing.DEF_v__h704 = DEF_v__h704;
      }
      ++num;
      if ((backing.DEF_v__h784) != DEF_v__h784)
      {
	vcd_write_val(sim_hdl, num, DEF_v__h784, 8u);
	backing.DEF_v__h784 = DEF_v__h784;
      }
      ++num;
      if ((backing.DEF_x__h960) != DEF_x__h960)
      {
	vcd_write_val(sim_hdl, num, DEF_x__h960, 32u);
	backing.DEF_x__h960 = DEF_x__h960;
      }
      ++num;
      if ((backing.DEF_x_wget__h250) != DEF_x_wget__h250)
      {
	vcd_write_val(sim_hdl, num, DEF_x_wget__h250, 8u);
	backing.DEF_x_wget__h250 = DEF_x_wget__h250;
      }
      ++num;
      if ((backing.DEF_x_wget__h647) != DEF_x_wget__h647)
      {
	vcd_write_val(sim_hdl, num, DEF_x_wget__h647, 8u);
	backing.DEF_x_wget__h647 = DEF_x_wget__h647;
      }
      ++num;
    }
    else
    {
      vcd_write_val(sim_hdl, num++, PORT_RST_N, 1u);
      backing.PORT_RST_N = PORT_RST_N;
      vcd_write_val(sim_hdl, num++, DEF_cycle_5_EQ_0___d16, 1u);
      backing.DEF_cycle_5_EQ_0___d16 = DEF_cycle_5_EQ_0___d16;
      vcd_write_val(sim_hdl, num++, DEF_cycle_5_EQ_128___d17, 1u);
      backing.DEF_cycle_5_EQ_128___d17 = DEF_cycle_5_EQ_128___d17;
      vcd_write_val(sim_hdl, num++, DEF_v__h315, 32u);
      backing.DEF_v__h315 = DEF_v__h315;
      vcd_write_val(sim_hdl, num++, DEF_v__h396, 8u);
      backing.DEF_v__h396 = DEF_v__h396;
      vcd_write_val(sim_hdl, num++, DEF_v__h704, 32u);
      backing.DEF_v__h704 = DEF_v__h704;
      vcd_write_val(sim_hdl, num++, DEF_v__h784, 8u);
      backing.DEF_v__h784 = DEF_v__h784;
      vcd_write_val(sim_hdl, num++, DEF_x__h960, 32u);
      backing.DEF_x__h960 = DEF_x__h960;
      vcd_write_val(sim_hdl, num++, DEF_x_wget__h250, 8u);
      backing.DEF_x_wget__h250 = DEF_x_wget__h250;
      vcd_write_val(sim_hdl, num++, DEF_x_wget__h647, 8u);
      backing.DEF_x_wget__h647 = DEF_x_wget__h647;
    }
}

void MOD_mkTbRCA::vcd_prims(tVCDDumpType dt, MOD_mkTbRCA &backing)
{
  INST_cycle.dump_VCD(dt, backing.INST_cycle);
  INST_randomVal1_ignore.dump_VCD(dt, backing.INST_randomVal1_ignore);
  INST_randomVal1_initialized.dump_VCD(dt, backing.INST_randomVal1_initialized);
  INST_randomVal1_zaz.dump_VCD(dt, backing.INST_randomVal1_zaz);
  INST_randomVal2_ignore.dump_VCD(dt, backing.INST_randomVal2_ignore);
  INST_randomVal2_initialized.dump_VCD(dt, backing.INST_randomVal2_initialized);
  INST_randomVal2_zaz.dump_VCD(dt, backing.INST_randomVal2_zaz);
}
