/*
 * Generated by Bluespec Compiler (build 14ff62d)
 * 
 * On Wed Jun 21 21:38:17 CST 2023
 * 
 */
#include "bluesim_primitives.h"
#include "mkTbCSASimple.h"


/* String declarations */
static std::string const __str_literal_2("%d + %d = %d", 12u);
static std::string const __str_literal_3("FAILED %d + %d gave %d instead of %d", 36u);
static std::string const __str_literal_1("PASSED", 6u);


/* Constructor */
MOD_mkTbCSASimple::MOD_mkTbCSASimple(tSimStateHdl simHdl, char const *name, Module *parent)
  : Module(simHdl, name, parent),
    __clk_handle_0(BAD_CLOCK_HANDLE),
    INST_cycle(simHdl, "cycle", this, 32u, 0u, (tUInt8)0u),
    PORT_RST_N((tUInt8)1u)
{
  symbol_count = 2u;
  symbols = new tSym[symbol_count];
  init_symbols_0();
}


/* Symbol init fns */

void MOD_mkTbCSASimple::init_symbols_0()
{
  init_symbol(&symbols[0u], "cycle", SYM_MODULE, &INST_cycle);
  init_symbol(&symbols[1u], "RL_test", SYM_RULE);
}


/* Rule actions */

void MOD_mkTbCSASimple::RL_test()
{
  tUInt8 DEF_high__h182;
  tUInt32 DEF_x__h4434;
  tUInt8 DEF_y__h1292;
  tUInt8 DEF_x__h1291;
  tUInt8 DEF_y__h1290;
  tUInt8 DEF_x__h1289;
  tUInt8 DEF_y__h1403;
  tUInt8 DEF_x__h1402;
  tUInt8 DEF_y__h1401;
  tUInt8 DEF_x__h1400;
  tUInt8 DEF_y__h1513;
  tUInt8 DEF_x__h1512;
  tUInt8 DEF_y__h1511;
  tUInt8 DEF_x__h1510;
  tUInt8 DEF_y__h2325;
  tUInt8 DEF_y__h3356;
  tUInt8 DEF_x__h2324;
  tUInt8 DEF_y__h2323;
  tUInt8 DEF_x__h2322;
  tUInt8 DEF_y__h2436;
  tUInt8 DEF_y__h3467;
  tUInt8 DEF_x__h2435;
  tUInt8 DEF_y__h2434;
  tUInt8 DEF_x__h2433;
  tUInt8 DEF_y__h2546;
  tUInt8 DEF_y__h3577;
  tUInt8 DEF_x__h2545;
  tUInt8 DEF_y__h2544;
  tUInt8 DEF_x__h2543;
  tUInt8 DEF_a__h316;
  tUInt8 DEF_x__h3207;
  tUInt8 DEF_y__h3354;
  tUInt8 DEF_x__h3353;
  tUInt8 DEF_y__h3465;
  tUInt8 DEF_x__h3464;
  tUInt8 DEF_y__h3575;
  tUInt8 DEF_x__h3574;
  tUInt8 DEF_b__h317;
  tUInt8 DEF_b__h319;
  tUInt8 DEF_a__h318;
  tUInt8 DEF_b__h4042;
  tUInt8 DEF_a__h4041;
  tUInt8 DEF_b__h4088;
  tUInt8 DEF_a__h4087;
  tUInt8 DEF_b__h4134;
  tUInt8 DEF_a__h4133;
  tUInt8 DEF_b__h4180;
  tUInt8 DEF_a__h4179;
  tUInt8 DEF_c__h2532;
  tUInt8 DEF_a__h4039;
  tUInt8 DEF_c__h3563;
  tUInt8 DEF_x__h2709;
  tUInt8 DEF_b__h4040;
  tUInt8 DEF_c__h2422;
  tUInt8 DEF_a__h4085;
  tUInt8 DEF_c__h3453;
  tUInt8 DEF_x__h2786;
  tUInt8 DEF_b__h4086;
  tUInt8 DEF_a__h4131;
  tUInt8 DEF_x__h2863;
  tUInt8 DEF_b__h4132;
  tUInt8 DEF_c__h1499;
  tUInt8 DEF_x__h1676;
  tUInt8 DEF_c__h1389;
  tUInt8 DEF_x__h1753;
  tUInt8 DEF_x__h1830;
  tUInt8 DEF_a__h4177;
  tUInt8 DEF_b__h4178;
  tUInt8 DEF_sel__h185;
  tUInt8 DEF_a__h320;
  tUInt8 DEF_NOT_cycle_EQ_8_AND_INV_SEL_ARR_1_8_63_102_177__ETC___d118;
  tUInt8 DEF_NOT_cycle_EQ_8___d3;
  tUInt8 DEF_NOT_cycle_EQ_8_AND_NOT_INV_SEL_ARR_1_8_63_102__ETC___d120;
  tUInt32 DEF_realAns__h4249;
  tUInt32 DEF_v__h175;
  tUInt8 DEF_INV_SEL_ARR_1_8_63_102_177_128_255_255_cycle_B_ETC___d117;
  tUInt8 DEF_cycle_EQ_8___d2;
  tUInt8 DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_4_ETC___d46;
  tUInt8 DEF_c__h2311;
  tUInt8 DEF_c__h1278;
  tUInt8 DEF_c__h3342;
  tUInt8 DEF_b__h1896;
  tUInt8 DEF_b__h1277;
  tUInt8 DEF_b__h1388;
  tUInt8 DEF_b__h1498;
  tUInt8 DEF_b__h2164;
  tUInt8 DEF_b__h2310;
  tUInt8 DEF_b__h2421;
  tUInt8 DEF_SEL_ARR_1_8_27_92_202_128_1_255_cycle___d8;
  tUInt8 DEF_b__h2531;
  tUInt8 DEF_a__h1895;
  tUInt8 DEF_a__h1276;
  tUInt8 DEF_a__h1387;
  tUInt8 DEF_a__h1497;
  tUInt8 DEF_a__h2163;
  tUInt8 DEF_a__h2309;
  tUInt8 DEF_a__h2420;
  tUInt8 DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle___d5;
  tUInt8 DEF_a__h2530;
  tUInt32 DEF_x__h918;
  DEF_x__h918 = INST_cycle.METH_read();
  switch (DEF_x__h918) {
  case 0u:
    DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle___d5 = (tUInt8)1u;
    break;
  case 1u:
    DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle___d5 = (tUInt8)8u;
    break;
  case 2u:
    DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle___d5 = (tUInt8)63u;
    break;
  case 3u:
    DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle___d5 = (tUInt8)102u;
    break;
  case 4u:
    DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle___d5 = (tUInt8)177u;
    break;
  case 5u:
    DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle___d5 = (tUInt8)128u;
    break;
  case 6u:
  case 7u:
    DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle___d5 = (tUInt8)255u;
    break;
  default:
    DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle___d5 = (tUInt8)170u;
  }
  DEF_a__h2530 = (tUInt8)(DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle___d5 >> 7u);
  DEF_a__h2420 = (tUInt8)((tUInt8)1u & (DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle___d5 >> 6u));
  DEF_a__h2309 = (tUInt8)((tUInt8)1u & (DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle___d5 >> 5u));
  DEF_a__h1497 = (tUInt8)((tUInt8)1u & (DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle___d5 >> 3u));
  DEF_a__h2163 = (tUInt8)((tUInt8)1u & (DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle___d5 >> 4u));
  DEF_a__h1387 = (tUInt8)((tUInt8)1u & (DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle___d5 >> 2u));
  DEF_a__h1276 = (tUInt8)((tUInt8)1u & (DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle___d5 >> 1u));
  DEF_a__h1895 = (tUInt8)((tUInt8)1u & DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle___d5);
  switch (DEF_x__h918) {
  case 0u:
  case 6u:
    DEF_SEL_ARR_1_8_27_92_202_128_1_255_cycle___d8 = (tUInt8)1u;
    break;
  case 1u:
    DEF_SEL_ARR_1_8_27_92_202_128_1_255_cycle___d8 = (tUInt8)8u;
    break;
  case 2u:
    DEF_SEL_ARR_1_8_27_92_202_128_1_255_cycle___d8 = (tUInt8)27u;
    break;
  case 3u:
    DEF_SEL_ARR_1_8_27_92_202_128_1_255_cycle___d8 = (tUInt8)92u;
    break;
  case 4u:
    DEF_SEL_ARR_1_8_27_92_202_128_1_255_cycle___d8 = (tUInt8)202u;
    break;
  case 5u:
    DEF_SEL_ARR_1_8_27_92_202_128_1_255_cycle___d8 = (tUInt8)128u;
    break;
  case 7u:
    DEF_SEL_ARR_1_8_27_92_202_128_1_255_cycle___d8 = (tUInt8)255u;
    break;
  default:
    DEF_SEL_ARR_1_8_27_92_202_128_1_255_cycle___d8 = (tUInt8)170u;
  }
  DEF_b__h2531 = (tUInt8)(DEF_SEL_ARR_1_8_27_92_202_128_1_255_cycle___d8 >> 7u);
  DEF_b__h2421 = (tUInt8)((tUInt8)1u & (DEF_SEL_ARR_1_8_27_92_202_128_1_255_cycle___d8 >> 6u));
  DEF_b__h2310 = (tUInt8)((tUInt8)1u & (DEF_SEL_ARR_1_8_27_92_202_128_1_255_cycle___d8 >> 5u));
  DEF_b__h2164 = (tUInt8)((tUInt8)1u & (DEF_SEL_ARR_1_8_27_92_202_128_1_255_cycle___d8 >> 4u));
  DEF_b__h1498 = (tUInt8)((tUInt8)1u & (DEF_SEL_ARR_1_8_27_92_202_128_1_255_cycle___d8 >> 3u));
  DEF_b__h1388 = (tUInt8)((tUInt8)1u & (DEF_SEL_ARR_1_8_27_92_202_128_1_255_cycle___d8 >> 2u));
  DEF_b__h1277 = (tUInt8)((tUInt8)1u & (DEF_SEL_ARR_1_8_27_92_202_128_1_255_cycle___d8 >> 1u));
  DEF_b__h1896 = (tUInt8)((tUInt8)1u & DEF_SEL_ARR_1_8_27_92_202_128_1_255_cycle___d8);
  DEF_c__h1278 = (tUInt8)((tUInt8)1u & ((DEF_a__h1895 & DEF_b__h1896 ? (tUInt8)2u : (tUInt8)0u) >> 1u));
  DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_4_ETC___d46 = DEF_a__h2163 & DEF_b__h2164;
  DEF_c__h2311 = (tUInt8)((tUInt8)1u & ((DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_4_ETC___d46 ? (tUInt8)2u : (tUInt8)0u) >> 1u));
  DEF_cycle_EQ_8___d2 = DEF_x__h918 == 8u;
  DEF_realAns__h4249 = 511u & ((511u & ((((tUInt32)((tUInt8)0u)) << 8u) | (tUInt32)(DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle___d5))) + (511u & ((((tUInt32)((tUInt8)0u)) << 8u) | (tUInt32)(DEF_SEL_ARR_1_8_27_92_202_128_1_255_cycle___d8))));
  DEF_NOT_cycle_EQ_8___d3 = !DEF_cycle_EQ_8___d2;
  DEF_a__h4177 = DEF_a__h2163 ^ DEF_b__h2164;
  DEF_b__h4178 = (tUInt8)1u & ~DEF_a__h4177;
  DEF_x__h1830 = DEF_a__h1276 ^ DEF_b__h1277;
  DEF_x__h1753 = DEF_a__h1387 ^ DEF_b__h1388;
  DEF_x__h1676 = DEF_a__h1497 ^ DEF_b__h1498;
  DEF_x__h2863 = DEF_a__h2309 ^ DEF_b__h2310;
  DEF_a__h4131 = DEF_x__h2863 ^ DEF_c__h2311;
  DEF_x__h2786 = DEF_a__h2420 ^ DEF_b__h2421;
  DEF_x__h2709 = DEF_a__h2530 ^ DEF_b__h2531;
  DEF_x__h3207 = DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_4_ETC___d46 | DEF_a__h2163;
  DEF_c__h3342 = (tUInt8)((tUInt8)1u & ((DEF_x__h3207 | DEF_b__h2164 ? (tUInt8)3u : (tUInt8)1u) >> 1u));
  DEF_b__h4132 = DEF_x__h2863 ^ DEF_c__h3342;
  DEF_y__h3354 = DEF_b__h2310 & DEF_c__h3342;
  DEF_x__h2545 = DEF_a__h2530 & DEF_b__h2531;
  DEF_x__h2435 = DEF_a__h2420 & DEF_b__h2421;
  DEF_y__h2323 = DEF_b__h2310 & DEF_c__h2311;
  DEF_x__h2324 = DEF_a__h2309 & DEF_b__h2310;
  DEF_y__h3356 = DEF_a__h2309 & DEF_c__h3342;
  DEF_x__h3353 = DEF_x__h2324 | DEF_y__h3356;
  DEF_c__h3453 = DEF_x__h3353 | DEF_y__h3354;
  DEF_b__h4086 = DEF_x__h2786 ^ DEF_c__h3453;
  DEF_y__h3465 = DEF_b__h2421 & DEF_c__h3453;
  DEF_y__h3467 = DEF_a__h2420 & DEF_c__h3453;
  DEF_x__h3464 = DEF_x__h2435 | DEF_y__h3467;
  DEF_c__h3563 = DEF_x__h3464 | DEF_y__h3465;
  DEF_b__h4040 = DEF_x__h2709 ^ DEF_c__h3563;
  DEF_y__h3575 = DEF_b__h2531 & DEF_c__h3563;
  DEF_y__h3577 = DEF_a__h2530 & DEF_c__h3563;
  DEF_x__h3574 = DEF_x__h2545 | DEF_y__h3577;
  DEF_b__h317 = DEF_x__h3574 | DEF_y__h3575;
  DEF_y__h2325 = DEF_a__h2309 & DEF_c__h2311;
  DEF_x__h2322 = DEF_x__h2324 | DEF_y__h2325;
  DEF_c__h2422 = DEF_x__h2322 | DEF_y__h2323;
  DEF_a__h4085 = DEF_x__h2786 ^ DEF_c__h2422;
  DEF_y__h2434 = DEF_b__h2421 & DEF_c__h2422;
  DEF_y__h2436 = DEF_a__h2420 & DEF_c__h2422;
  DEF_x__h2433 = DEF_x__h2435 | DEF_y__h2436;
  DEF_c__h2532 = DEF_x__h2433 | DEF_y__h2434;
  DEF_a__h4039 = DEF_x__h2709 ^ DEF_c__h2532;
  DEF_y__h2544 = DEF_b__h2531 & DEF_c__h2532;
  DEF_y__h2546 = DEF_a__h2530 & DEF_c__h2532;
  DEF_x__h2543 = DEF_x__h2545 | DEF_y__h2546;
  DEF_a__h316 = DEF_x__h2543 | DEF_y__h2544;
  DEF_x__h1512 = DEF_a__h1497 & DEF_b__h1498;
  DEF_x__h1402 = DEF_a__h1387 & DEF_b__h1388;
  DEF_y__h1290 = DEF_b__h1277 & DEF_c__h1278;
  DEF_x__h1291 = DEF_a__h1276 & DEF_b__h1277;
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_cycle_EQ_8___d2)
      dollar_display(sim_hdl, this, "s", &__str_literal_1);
  DEF_y__h1292 = DEF_a__h1276 & DEF_c__h1278;
  DEF_x__h1289 = DEF_x__h1291 | DEF_y__h1292;
  DEF_c__h1389 = DEF_x__h1289 | DEF_y__h1290;
  DEF_y__h1401 = DEF_b__h1388 & DEF_c__h1389;
  DEF_y__h1403 = DEF_a__h1387 & DEF_c__h1389;
  DEF_x__h1400 = DEF_x__h1402 | DEF_y__h1403;
  DEF_c__h1499 = DEF_x__h1400 | DEF_y__h1401;
  DEF_y__h1511 = DEF_b__h1498 & DEF_c__h1499;
  DEF_y__h1513 = DEF_a__h1497 & DEF_c__h1499;
  DEF_x__h1510 = DEF_x__h1512 | DEF_y__h1513;
  DEF_sel__h185 = DEF_x__h1510 | DEF_y__h1511;
  DEF_a__h320 = (tUInt8)1u & ~DEF_sel__h185;
  DEF_a__h4179 = DEF_a__h320 & DEF_a__h4177;
  DEF_b__h4180 = DEF_sel__h185 & DEF_b__h4178;
  DEF_a__h4133 = DEF_a__h320 & DEF_a__h4131;
  DEF_b__h4134 = DEF_sel__h185 & DEF_b__h4132;
  DEF_a__h4087 = DEF_a__h320 & DEF_a__h4085;
  DEF_b__h4088 = DEF_sel__h185 & DEF_b__h4086;
  DEF_a__h4041 = DEF_a__h320 & DEF_a__h4039;
  DEF_b__h4042 = DEF_sel__h185 & DEF_b__h4040;
  DEF_a__h318 = DEF_a__h320 & DEF_a__h316;
  DEF_b__h319 = DEF_sel__h185 & DEF_b__h317;
  DEF_x__h4434 = DEF_x__h918 + 1u;
  DEF_high__h182 = (tUInt8)31u & ((((((DEF_a__h318 | DEF_b__h319) << 4u) | ((DEF_a__h4041 | DEF_b__h4042) << 3u)) | ((DEF_a__h4087 | DEF_b__h4088) << 2u)) | ((DEF_a__h4133 | DEF_b__h4134) << 1u)) | (DEF_a__h4179 | DEF_b__h4180));
  DEF_v__h175 = 511u & (((((((tUInt32)(DEF_high__h182)) << 4u) | (((tUInt32)(DEF_x__h1676 ^ DEF_c__h1499)) << 3u)) | (((tUInt32)(DEF_x__h1753 ^ DEF_c__h1389)) << 2u)) | (((tUInt32)(DEF_x__h1830 ^ DEF_c__h1278)) << 1u)) | (tUInt32)(DEF_a__h1895 ^ DEF_b__h1896));
  DEF_INV_SEL_ARR_1_8_63_102_177_128_255_255_cycle_B_ETC___d117 = DEF_v__h175 == DEF_realAns__h4249;
  DEF_NOT_cycle_EQ_8_AND_NOT_INV_SEL_ARR_1_8_63_102__ETC___d120 = DEF_NOT_cycle_EQ_8___d3 && !DEF_INV_SEL_ARR_1_8_63_102_177_128_255_255_cycle_B_ETC___d117;
  DEF_NOT_cycle_EQ_8_AND_INV_SEL_ARR_1_8_63_102_177__ETC___d118 = DEF_NOT_cycle_EQ_8___d3 && DEF_INV_SEL_ARR_1_8_63_102_177_128_255_255_cycle_B_ETC___d117;
  if (!(PORT_RST_N == (tUInt8)0u))
  {
    if (DEF_cycle_EQ_8___d2)
      dollar_finish(sim_hdl, "32", 1u);
    if (DEF_NOT_cycle_EQ_8_AND_INV_SEL_ARR_1_8_63_102_177__ETC___d118)
      dollar_display(sim_hdl,
		     this,
		     "s,8,8,9",
		     &__str_literal_2,
		     DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle___d5,
		     DEF_SEL_ARR_1_8_27_92_202_128_1_255_cycle___d8,
		     DEF_v__h175);
    if (DEF_NOT_cycle_EQ_8_AND_NOT_INV_SEL_ARR_1_8_63_102__ETC___d120)
      dollar_display(sim_hdl,
		     this,
		     "s,8,8,9,9",
		     &__str_literal_3,
		     DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle___d5,
		     DEF_SEL_ARR_1_8_27_92_202_128_1_255_cycle___d8,
		     DEF_v__h175,
		     DEF_realAns__h4249);
    if (DEF_NOT_cycle_EQ_8_AND_NOT_INV_SEL_ARR_1_8_63_102__ETC___d120)
      dollar_finish(sim_hdl, "32", 1u);
  }
  INST_cycle.METH_write(DEF_x__h4434);
}


/* Methods */


/* Reset routines */

void MOD_mkTbCSASimple::reset_RST_N(tUInt8 ARG_rst_in)
{
  PORT_RST_N = ARG_rst_in;
  INST_cycle.reset_RST(ARG_rst_in);
}


/* Static handles to reset routines */


/* Functions for the parent module to register its reset fns */


/* Functions to set the elaborated clock id */

void MOD_mkTbCSASimple::set_clk_0(char const *s)
{
  __clk_handle_0 = bk_get_or_define_clock(sim_hdl, s);
}


/* State dumping routine */
void MOD_mkTbCSASimple::dump_state(unsigned int indent)
{
  printf("%*s%s:\n", indent, "", inst_name);
  INST_cycle.dump_state(indent + 2u);
}


/* VCD dumping routines */

unsigned int MOD_mkTbCSASimple::dump_VCD_defs(unsigned int levels)
{
  vcd_write_scope_start(sim_hdl, inst_name);
  vcd_num = vcd_reserve_ids(sim_hdl, 2u);
  unsigned int num = vcd_num;
  for (unsigned int clk = 0u; clk < bk_num_clocks(sim_hdl); ++clk)
    vcd_add_clock_def(sim_hdl, this, bk_clock_name(sim_hdl, clk), bk_clock_vcd_num(sim_hdl, clk));
  vcd_write_def(sim_hdl, bk_clock_vcd_num(sim_hdl, __clk_handle_0), "CLK", 1u);
  vcd_write_def(sim_hdl, num++, "RST_N", 1u);
  num = INST_cycle.dump_VCD_defs(num);
  vcd_write_scope_end(sim_hdl);
  return num;
}

void MOD_mkTbCSASimple::dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkTbCSASimple &backing)
{
  vcd_defs(dt, backing);
  vcd_prims(dt, backing);
}

void MOD_mkTbCSASimple::vcd_defs(tVCDDumpType dt, MOD_mkTbCSASimple &backing)
{
  unsigned int num = vcd_num;
  if (dt == VCD_DUMP_XS)
  {
    vcd_write_x(sim_hdl, num++, 1u);
  }
  else
    if (dt == VCD_DUMP_CHANGES)
    {
      if ((backing.PORT_RST_N) != PORT_RST_N)
      {
	vcd_write_val(sim_hdl, num, PORT_RST_N, 1u);
	backing.PORT_RST_N = PORT_RST_N;
      }
      ++num;
    }
    else
    {
      vcd_write_val(sim_hdl, num++, PORT_RST_N, 1u);
      backing.PORT_RST_N = PORT_RST_N;
    }
}

void MOD_mkTbCSASimple::vcd_prims(tVCDDumpType dt, MOD_mkTbCSASimple &backing)
{
  INST_cycle.dump_VCD(dt, backing.INST_cycle);
}
