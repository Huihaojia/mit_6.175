/*
 * Generated by Bluespec Compiler (build 14ff62d)
 * 
 * On Tue Jul  4 01:30:10 CST 2023
 * 
 */
#include "bluesim_primitives.h"
#include "mkTbEx9a.h"
#include "imported_BDPI_functions.h"


/* String declarations */
static std::string const __str_literal_2("    if signed: %0d * %0d DUT gave %0d", 37u);
static std::string const __str_literal_5("    if signed: %0d * %0d DUT gave %0d instead of %0d",
					 52u);
static std::string const __str_literal_3("    if unsigned: %0d * %0d DUT gave %0d", 39u);
static std::string const __str_literal_6("    if unsigned: %0d * %0d DUT gave %0d instead of %0d",
					 54u);
static std::string const __str_literal_4("FAILED case %0d", 15u);
static std::string const __str_literal_8("FAILED due to cycle limit", 25u);
static std::string const __str_literal_7("PASSED %0d test cases in %0d cycles", 35u);
static std::string const __str_literal_1("PASSED case %0d", 15u);


/* Constructor */
MOD_mkTbEx9a::MOD_mkTbEx9a(tSimStateHdl simHdl, char const *name, Module *parent)
  : Module(simHdl, name, parent),
    __clk_handle_0(BAD_CLOCK_HANDLE),
    INST_mod_i(simHdl, "mod_i", this, 6u, (tUInt8)17u, (tUInt8)0u),
    INST_mod_m_neg(simHdl, "mod_m_neg", this, 66u),
    INST_mod_m_pos(simHdl, "mod_m_pos", this, 66u),
    INST_mod_p(simHdl, "mod_p", this, 66u),
    INST_tb_cycle(simHdl, "tb_cycle", this, 32u, 0u, (tUInt8)0u),
    INST_tb_feed_count(simHdl, "tb_feed_count", this, 32u, 0u, (tUInt8)0u),
    INST_tb_operands_fifo(simHdl, "tb_operands_fifo", this, 64u, 4u, 1u, 0u),
    INST_tb_randomA_ignore(simHdl, "tb_randomA_ignore", this, 32u, (tUInt8)0u),
    INST_tb_randomA_initialized(simHdl, "tb_randomA_initialized", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_tb_randomA_zaz(simHdl, "tb_randomA_zaz", this, 32u, (tUInt8)0u),
    INST_tb_randomB_ignore(simHdl, "tb_randomB_ignore", this, 32u, (tUInt8)0u),
    INST_tb_randomB_initialized(simHdl, "tb_randomB_initialized", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_tb_randomB_zaz(simHdl, "tb_randomB_zaz", this, 32u, (tUInt8)0u),
    INST_tb_read_count(simHdl, "tb_read_count", this, 32u, 0u, (tUInt8)0u),
    PORT_RST_N((tUInt8)1u),
    DEF_new_value__h1329(2863311530u),
    DEF_new_value__h902(2863311530u),
    DEF_mod_p__h2342(66u),
    DEF_y__h322(66u),
    DEF_y__h288(66u),
    DEF_mod_m_neg_BITS_64_TO_0___h334(65u),
    DEF_mod_m_pos_BITS_64_TO_0___h310(65u),
    DEF_SEXT_tb_operands_fifo_first__4_BITS_63_TO_32_5_ETC___d79(128u),
    DEF_temp_p__h175(66u),
    DEF_mod_p_PLUS_mod_m_pos___d9(66u),
    DEF_mod_p_PLUS_mod_m_pos_BITS_64_TO_0_1_CONCAT_0_2___d13(66u),
    DEF_mod_p_PLUS_mod_m_neg_7_BITS_64_TO_0_0_CONCAT_0_1___d22(66u),
    DEF_mod_p_PLUS_mod_m_neg_7___d18(66u),
    DEF_x__h189(66u),
    DEF_y__h330(66u),
    DEF_y__h296(66u),
    DEF_x__h2194(66u),
    DEF_x__h1620(66u),
    DEF_x__h1904(66u)
{
  symbol_count = 45u;
  symbols = new tSym[symbol_count];
  init_symbols_0();
}


/* Symbol init fns */

void MOD_mkTbEx9a::init_symbols_0()
{
  init_symbol(&symbols[0u], "CAN_FIRE_RL_mod_mul_step", SYM_DEF, &DEF_CAN_FIRE_RL_mod_mul_step, 1u);
  init_symbol(&symbols[1u], "CAN_FIRE_RL_tb_feed", SYM_DEF, &DEF_CAN_FIRE_RL_tb_feed, 1u);
  init_symbol(&symbols[2u],
	      "CAN_FIRE_RL_tb_monitor_test",
	      SYM_DEF,
	      &DEF_CAN_FIRE_RL_tb_monitor_test,
	      1u);
  init_symbol(&symbols[3u],
	      "CAN_FIRE_RL_tb_randomA_every",
	      SYM_DEF,
	      &DEF_CAN_FIRE_RL_tb_randomA_every,
	      1u);
  init_symbol(&symbols[4u],
	      "CAN_FIRE_RL_tb_randomA_every_1",
	      SYM_DEF,
	      &DEF_CAN_FIRE_RL_tb_randomA_every_1,
	      1u);
  init_symbol(&symbols[5u],
	      "CAN_FIRE_RL_tb_randomB_every",
	      SYM_DEF,
	      &DEF_CAN_FIRE_RL_tb_randomB_every,
	      1u);
  init_symbol(&symbols[6u],
	      "CAN_FIRE_RL_tb_randomB_every_1",
	      SYM_DEF,
	      &DEF_CAN_FIRE_RL_tb_randomB_every_1,
	      1u);
  init_symbol(&symbols[7u], "CAN_FIRE_RL_tb_read", SYM_DEF, &DEF_CAN_FIRE_RL_tb_read, 1u);
  init_symbol(&symbols[8u], "mod_i", SYM_MODULE, &INST_mod_i);
  init_symbol(&symbols[9u], "mod_m_neg", SYM_MODULE, &INST_mod_m_neg);
  init_symbol(&symbols[10u], "mod_m_pos", SYM_MODULE, &INST_mod_m_pos);
  init_symbol(&symbols[11u], "mod_p", SYM_MODULE, &INST_mod_p);
  init_symbol(&symbols[12u], "RL_mod_mul_step", SYM_RULE);
  init_symbol(&symbols[13u], "RL_tb_feed", SYM_RULE);
  init_symbol(&symbols[14u], "RL_tb_monitor_test", SYM_RULE);
  init_symbol(&symbols[15u], "RL_tb_randomA_every", SYM_RULE);
  init_symbol(&symbols[16u], "RL_tb_randomA_every_1", SYM_RULE);
  init_symbol(&symbols[17u], "RL_tb_randomB_every", SYM_RULE);
  init_symbol(&symbols[18u], "RL_tb_randomB_every_1", SYM_RULE);
  init_symbol(&symbols[19u], "RL_tb_read", SYM_RULE);
  init_symbol(&symbols[20u], "tb_cycle", SYM_MODULE, &INST_tb_cycle);
  init_symbol(&symbols[21u], "tb_feed_count", SYM_MODULE, &INST_tb_feed_count);
  init_symbol(&symbols[22u], "tb_operands_fifo", SYM_MODULE, &INST_tb_operands_fifo);
  init_symbol(&symbols[23u], "tb_randomA_ignore", SYM_MODULE, &INST_tb_randomA_ignore);
  init_symbol(&symbols[24u], "tb_randomA_initialized", SYM_MODULE, &INST_tb_randomA_initialized);
  init_symbol(&symbols[25u], "tb_randomA_zaz", SYM_MODULE, &INST_tb_randomA_zaz);
  init_symbol(&symbols[26u], "tb_randomB_ignore", SYM_MODULE, &INST_tb_randomB_ignore);
  init_symbol(&symbols[27u], "tb_randomB_initialized", SYM_MODULE, &INST_tb_randomB_initialized);
  init_symbol(&symbols[28u], "tb_randomB_zaz", SYM_MODULE, &INST_tb_randomB_zaz);
  init_symbol(&symbols[29u], "tb_read_count", SYM_MODULE, &INST_tb_read_count);
  init_symbol(&symbols[30u], "v__h1367", SYM_DEF, &DEF_v__h1367, 32u);
  init_symbol(&symbols[31u], "v__h941", SYM_DEF, &DEF_v__h941, 32u);
  init_symbol(&symbols[32u],
	      "WILL_FIRE_RL_mod_mul_step",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_mod_mul_step,
	      1u);
  init_symbol(&symbols[33u], "WILL_FIRE_RL_tb_feed", SYM_DEF, &DEF_WILL_FIRE_RL_tb_feed, 1u);
  init_symbol(&symbols[34u],
	      "WILL_FIRE_RL_tb_monitor_test",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_tb_monitor_test,
	      1u);
  init_symbol(&symbols[35u],
	      "WILL_FIRE_RL_tb_randomA_every",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_tb_randomA_every,
	      1u);
  init_symbol(&symbols[36u],
	      "WILL_FIRE_RL_tb_randomA_every_1",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_tb_randomA_every_1,
	      1u);
  init_symbol(&symbols[37u],
	      "WILL_FIRE_RL_tb_randomB_every",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_tb_randomB_every,
	      1u);
  init_symbol(&symbols[38u],
	      "WILL_FIRE_RL_tb_randomB_every_1",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_tb_randomB_every_1,
	      1u);
  init_symbol(&symbols[39u], "WILL_FIRE_RL_tb_read", SYM_DEF, &DEF_WILL_FIRE_RL_tb_read, 1u);
  init_symbol(&symbols[40u], "x__h2242", SYM_DEF, &DEF_x__h2242, 32u);
  init_symbol(&symbols[41u], "x__h2771", SYM_DEF, &DEF_x__h2771, 32u);
  init_symbol(&symbols[42u], "x__h347", SYM_DEF, &DEF_x__h347, 6u);
  init_symbol(&symbols[43u], "x_wget__h1193", SYM_DEF, &DEF_x_wget__h1193, 32u);
  init_symbol(&symbols[44u], "x_wget__h766", SYM_DEF, &DEF_x_wget__h766, 32u);
}


/* Rule actions */

void MOD_mkTbEx9a::RL_mod_mul_step()
{
  tUInt8 DEF_part_r__h173;
  DEF_mod_p__h2342 = INST_mod_p.METH_read();
  DEF_y__h322 = INST_mod_m_neg.METH_read();
  DEF_y__h288 = INST_mod_m_pos.METH_read();
  DEF_x__h347 = INST_mod_i.METH_read();
  wop_primExtractWide(65u, 66u, DEF_y__h322, 32u, 64u, 32u, 0u, DEF_mod_m_neg_BITS_64_TO_0___h334);
  wop_primExtractWide(65u, 66u, DEF_y__h288, 32u, 64u, 32u, 0u, DEF_mod_m_pos_BITS_64_TO_0___h310);
  DEF_part_r__h173 = DEF_mod_p__h2342.get_bits_in_word8(0u, 0u, 3u);
  wop_add(DEF_mod_p__h2342, DEF_y__h288, DEF_mod_p_PLUS_mod_m_pos___d9);
  wop_add(DEF_mod_p__h2342, DEF_y__h322, DEF_mod_p_PLUS_mod_m_neg_7___d18);
  DEF_y__h330.set_bits_in_word(primExtract8(2u,
					    65u,
					    DEF_mod_m_neg_BITS_64_TO_0___h334,
					    32u,
					    64u,
					    32u,
					    63u),
			       2u,
			       0u,
			       2u).set_whole_word(primExtract32(32u,
								65u,
								DEF_mod_m_neg_BITS_64_TO_0___h334,
								32u,
								62u,
								32u,
								31u),
						  1u).set_whole_word((DEF_mod_m_neg_BITS_64_TO_0___h334.get_bits_in_word32(0u,
															   0u,
															   31u) << 1u) | (tUInt32)((tUInt8)0u),
								     0u);
  wop_add(DEF_mod_p__h2342, DEF_y__h330, DEF_mod_p_PLUS_mod_m_neg_7_BITS_64_TO_0_0_CONCAT_0_1___d22);
  DEF_x__h343 = (tUInt8)63u & (DEF_x__h347 + (tUInt8)1u);
  DEF_y__h296.set_bits_in_word(primExtract8(2u,
					    65u,
					    DEF_mod_m_pos_BITS_64_TO_0___h310,
					    32u,
					    64u,
					    32u,
					    63u),
			       2u,
			       0u,
			       2u).set_whole_word(primExtract32(32u,
								65u,
								DEF_mod_m_pos_BITS_64_TO_0___h310,
								32u,
								62u,
								32u,
								31u),
						  1u).set_whole_word((DEF_mod_m_pos_BITS_64_TO_0___h310.get_bits_in_word32(0u,
															   0u,
															   31u) << 1u) | (tUInt32)((tUInt8)0u),
								     0u);
  wop_add(DEF_mod_p__h2342, DEF_y__h296, DEF_mod_p_PLUS_mod_m_pos_BITS_64_TO_0_1_CONCAT_0_2___d13);
  switch (DEF_part_r__h173) {
  case (tUInt8)1u:
  case (tUInt8)2u:
    DEF_temp_p__h175 = DEF_mod_p_PLUS_mod_m_pos___d9;
    break;
  case (tUInt8)3u:
    DEF_temp_p__h175 = DEF_mod_p_PLUS_mod_m_pos_BITS_64_TO_0_1_CONCAT_0_2___d13;
    break;
  case (tUInt8)5u:
  case (tUInt8)6u:
    DEF_temp_p__h175 = DEF_mod_p_PLUS_mod_m_neg_7___d18;
    break;
  case (tUInt8)4u:
    DEF_temp_p__h175 = DEF_mod_p_PLUS_mod_m_neg_7_BITS_64_TO_0_0_CONCAT_0_1___d22;
    break;
  default:
    DEF_temp_p__h175 = DEF_mod_p__h2342;
  }
  wop_primShiftRAWide(66u, 66u, DEF_temp_p__h175, 32u, 2u, DEF_x__h189);
  INST_mod_p.METH_write(DEF_x__h189);
  INST_mod_i.METH_write(DEF_x__h343);
}

void MOD_mkTbEx9a::RL_tb_randomA_every()
{
  if (!(PORT_RST_N == (tUInt8)0u))
  {
    rand32();
    DEF_new_value__h902 = rand32();
  }
  INST_tb_randomA_zaz.METH_wset(DEF_new_value__h902);
}

void MOD_mkTbEx9a::RL_tb_randomA_every_1()
{
  DEF_x_wget__h766 = INST_tb_randomA_zaz.METH_wget();
  DEF_tb_randomA_zaz_whas____d32 = INST_tb_randomA_zaz.METH_whas();
  DEF_v__h941 = DEF_tb_randomA_zaz_whas____d32 ? DEF_x_wget__h766 : 0u;
  INST_tb_randomA_ignore.METH_wset(DEF_v__h941);
}

void MOD_mkTbEx9a::RL_tb_randomB_every()
{
  if (!(PORT_RST_N == (tUInt8)0u))
  {
    rand32();
    DEF_new_value__h1329 = rand32();
  }
  INST_tb_randomB_zaz.METH_wset(DEF_new_value__h1329);
}

void MOD_mkTbEx9a::RL_tb_randomB_every_1()
{
  DEF_x_wget__h1193 = INST_tb_randomB_zaz.METH_wget();
  DEF_v__h1367 = INST_tb_randomB_zaz.METH_whas() ? DEF_x_wget__h1193 : 0u;
  INST_tb_randomB_ignore.METH_wset(DEF_v__h1367);
}

void MOD_mkTbEx9a::RL_tb_feed()
{
  tUInt64 DEF_IF_tb_randomA_zaz_whas__2_THEN_tb_randomA_zaz__ETC___d57;
  tUInt32 DEF_x__h2223;
  tUInt8 DEF_NOT_IF_tb_randomA_zaz_whas__2_THEN_tb_randomA__ETC___d56;
  tUInt8 DEF__1__h1864;
  tUInt32 DEF_IF_tb_randomA_zaz_whas__2_THEN_NEG_tb_randomA__ETC___d61;
  tUInt8 DEF__1__h2139;
  DEF_x__h2242 = INST_tb_feed_count.METH_read();
  DEF_x_wget__h1193 = INST_tb_randomB_zaz.METH_wget();
  DEF_x_wget__h766 = INST_tb_randomA_zaz.METH_wget();
  DEF_tb_randomA_zaz_whas____d32 = INST_tb_randomA_zaz.METH_whas();
  DEF_IF_tb_randomA_zaz_whas__2_THEN_NEG_tb_randomA__ETC___d61 = DEF_tb_randomA_zaz_whas____d32 ? -DEF_x_wget__h766 : 0u;
  DEF__1__h2139 = (tUInt8)(DEF_IF_tb_randomA_zaz_whas__2_THEN_NEG_tb_randomA__ETC___d61 >> 31u);
  DEF_v__h941 = DEF_tb_randomA_zaz_whas____d32 ? DEF_x_wget__h766 : 0u;
  DEF__1__h1864 = (tUInt8)(DEF_v__h941 >> 31u);
  DEF_v__h1367 = INST_tb_randomB_zaz.METH_whas() ? DEF_x_wget__h1193 : 0u;
  DEF_IF_tb_randomA_zaz_whas__2_THEN_tb_randomA_zaz__ETC___d41 = DEF_v__h941 == 2147483648u;
  DEF_IF_tb_randomB_zaz_whas__8_THEN_tb_randomB_zaz__ETC___d42 = DEF_v__h1367 == 2147483648u;
  DEF_NOT_IF_tb_randomA_zaz_whas__2_THEN_tb_randomA__ETC___d56 = !DEF_IF_tb_randomA_zaz_whas__2_THEN_tb_randomA_zaz__ETC___d41 && !DEF_IF_tb_randomB_zaz_whas__8_THEN_tb_randomB_zaz__ETC___d42;
  DEF_x__h2223 = DEF_x__h2242 + 1u;
  DEF_x__h1620.set_bits_in_word((tUInt8)3u & ((DEF__1__h1864 << 1u) | (tUInt8)(DEF_v__h941 >> 31u)),
				2u,
				0u,
				2u).set_whole_word((((tUInt32)(2147483647u & DEF_v__h941)) << 1u) | (tUInt32)((tUInt8)(0llu)),
						   1u).set_whole_word((tUInt32)(0llu), 0u);
  DEF_x__h2194.set_bits_in_word((tUInt8)(0llu),
				2u,
				0u,
				2u).set_whole_word((((tUInt32)(2147483647u & 0llu)) << 1u) | (tUInt32)((tUInt8)(DEF_v__h1367 >> 31u)),
						   1u).set_whole_word((((tUInt32)(2147483647u & DEF_v__h1367)) << 1u) | (tUInt32)((tUInt8)0u),
								      0u);
  DEF_x__h1904.set_bits_in_word((tUInt8)3u & ((DEF__1__h2139 << 1u) | (tUInt8)(DEF_IF_tb_randomA_zaz_whas__2_THEN_NEG_tb_randomA__ETC___d61 >> 31u)),
				2u,
				0u,
				2u).set_whole_word((((tUInt32)(2147483647u & DEF_IF_tb_randomA_zaz_whas__2_THEN_NEG_tb_randomA__ETC___d61)) << 1u) | (tUInt32)((tUInt8)(0llu)),
						   1u).set_whole_word((tUInt32)(0llu), 0u);
  DEF_IF_tb_randomA_zaz_whas__2_THEN_tb_randomA_zaz__ETC___d57 = (((tUInt64)(DEF_v__h941)) << 32u) | (tUInt64)(DEF_v__h1367);
  if (DEF_NOT_IF_tb_randomA_zaz_whas__2_THEN_tb_randomA__ETC___d56)
    INST_tb_operands_fifo.METH_enq(DEF_IF_tb_randomA_zaz_whas__2_THEN_tb_randomA_zaz__ETC___d57);
  if (DEF_NOT_IF_tb_randomA_zaz_whas__2_THEN_tb_randomA__ETC___d56)
    INST_mod_m_pos.METH_write(DEF_x__h1620);
  if (DEF_NOT_IF_tb_randomA_zaz_whas__2_THEN_tb_randomA__ETC___d56)
    INST_mod_m_neg.METH_write(DEF_x__h1904);
  if (DEF_NOT_IF_tb_randomA_zaz_whas__2_THEN_tb_randomA__ETC___d56)
    INST_mod_p.METH_write(DEF_x__h2194);
  if (DEF_NOT_IF_tb_randomA_zaz_whas__2_THEN_tb_randomA__ETC___d56)
    INST_mod_i.METH_write((tUInt8)0u);
  if (DEF_NOT_IF_tb_randomA_zaz_whas__2_THEN_tb_randomA__ETC___d56)
    INST_tb_feed_count.METH_write(DEF_x__h2223);
}

void MOD_mkTbEx9a::RL_tb_read()
{
  tUInt32 DEF_x__h2644;
  tUInt8 DEF_NOT_mod_p_BITS_64_TO_1_3_EQ_SEXT_tb_operands_f_ETC___d85;
  tUInt64 DEF_tb_operands_fifo_first____d74;
  tUInt32 DEF_b__h2263;
  tUInt32 DEF_signed_tb_operands_fifo_first__4_BITS_31_TO_0_7___d83;
  tUInt32 DEF_a__h2262;
  tUInt32 DEF_signed_tb_operands_fifo_first__4_BITS_63_TO_32_5___d82;
  tUInt64 DEF_v__h2293;
  tUInt64 DEF_signed_mod_p_BITS_64_TO_1_3___d84;
  tUInt64 DEF_expected__h2347;
  tUInt64 DEF_signed_SEXT_tb_operands_fifo_first__4_BITS_63_ETC___d86;
  tUInt8 DEF_mod_p_BITS_64_TO_1_3_EQ_SEXT_tb_operands_fifo__ETC___d81;
  DEF_mod_p__h2342 = INST_mod_p.METH_read();
  DEF_v__h2293 = primExtract64(64u, 66u, DEF_mod_p__h2342, 32u, 64u, 32u, 1u);
  DEF_signed_mod_p_BITS_64_TO_1_3___d84 = DEF_v__h2293;
  DEF_tb_operands_fifo_first____d74 = INST_tb_operands_fifo.METH_first();
  DEF_a__h2262 = (tUInt32)(DEF_tb_operands_fifo_first____d74 >> 32u);
  DEF_signed_tb_operands_fifo_first__4_BITS_63_TO_32_5___d82 = DEF_a__h2262;
  DEF_b__h2263 = (tUInt32)(DEF_tb_operands_fifo_first____d74);
  DEF_signed_tb_operands_fifo_first__4_BITS_31_TO_0_7___d83 = DEF_b__h2263;
  DEF_x__h2771 = INST_tb_read_count.METH_read();
  DEF_x__h347 = INST_mod_i.METH_read();
  wop_mul(WideData(64u, primSignExt64(64u, 32u, (tUInt32)(DEF_a__h2262))),
	  WideData(64u, primSignExt64(64u, 32u, (tUInt32)(DEF_b__h2263))),
	  DEF_SEXT_tb_operands_fifo_first__4_BITS_63_TO_32_5_ETC___d79);
  DEF_expected__h2347 = primExtract64(64u,
				      128u,
				      DEF_SEXT_tb_operands_fifo_first__4_BITS_63_TO_32_5_ETC___d79,
				      32u,
				      63u,
				      32u,
				      0u);
  DEF_mod_p_BITS_64_TO_1_3_EQ_SEXT_tb_operands_fifo__ETC___d81 = DEF_v__h2293 == DEF_expected__h2347;
  DEF_signed_SEXT_tb_operands_fifo_first__4_BITS_63_ETC___d86 = DEF_expected__h2347;
  DEF_NOT_mod_p_BITS_64_TO_1_3_EQ_SEXT_tb_operands_f_ETC___d85 = !DEF_mod_p_BITS_64_TO_1_3_EQ_SEXT_tb_operands_fifo__ETC___d81;
  DEF_x__h2644 = DEF_x__h2771 + 1u;
  DEF_x__h343 = (tUInt8)63u & (DEF_x__h347 + (tUInt8)1u);
  INST_tb_operands_fifo.METH_deq();
  INST_mod_i.METH_write(DEF_x__h343);
  if (!(PORT_RST_N == (tUInt8)0u))
  {
    if (DEF_mod_p_BITS_64_TO_1_3_EQ_SEXT_tb_operands_fifo__ETC___d81)
      dollar_display(sim_hdl, this, "s,32", &__str_literal_1, DEF_x__h2771);
    if (DEF_mod_p_BITS_64_TO_1_3_EQ_SEXT_tb_operands_fifo__ETC___d81)
      dollar_display(sim_hdl,
		     this,
		     "s,-32,-32,-64",
		     &__str_literal_2,
		     DEF_signed_tb_operands_fifo_first__4_BITS_63_TO_32_5___d82,
		     DEF_signed_tb_operands_fifo_first__4_BITS_31_TO_0_7___d83,
		     DEF_signed_mod_p_BITS_64_TO_1_3___d84);
    if (DEF_mod_p_BITS_64_TO_1_3_EQ_SEXT_tb_operands_fifo__ETC___d81)
      dollar_display(sim_hdl,
		     this,
		     "s,32,32,64",
		     &__str_literal_3,
		     DEF_a__h2262,
		     DEF_b__h2263,
		     DEF_v__h2293);
    if (DEF_NOT_mod_p_BITS_64_TO_1_3_EQ_SEXT_tb_operands_f_ETC___d85)
      dollar_display(sim_hdl, this, "s,32", &__str_literal_4, DEF_x__h2771);
    if (DEF_NOT_mod_p_BITS_64_TO_1_3_EQ_SEXT_tb_operands_f_ETC___d85)
      dollar_display(sim_hdl,
		     this,
		     "s,-32,-32,-64,-64",
		     &__str_literal_5,
		     DEF_signed_tb_operands_fifo_first__4_BITS_63_TO_32_5___d82,
		     DEF_signed_tb_operands_fifo_first__4_BITS_31_TO_0_7___d83,
		     DEF_signed_mod_p_BITS_64_TO_1_3___d84,
		     DEF_signed_SEXT_tb_operands_fifo_first__4_BITS_63_ETC___d86);
    if (DEF_NOT_mod_p_BITS_64_TO_1_3_EQ_SEXT_tb_operands_f_ETC___d85)
      dollar_display(sim_hdl,
		     this,
		     "s,32,32,64,64",
		     &__str_literal_6,
		     DEF_a__h2262,
		     DEF_b__h2263,
		     DEF_v__h2293,
		     DEF_expected__h2347);
    if (DEF_NOT_mod_p_BITS_64_TO_1_3_EQ_SEXT_tb_operands_f_ETC___d85)
      dollar_finish(sim_hdl, "32", 1u);
  }
  INST_tb_read_count.METH_write(DEF_x__h2644);
}

void MOD_mkTbEx9a::RL_tb_monitor_test()
{
  tUInt32 DEF_x__h3018;
  tUInt8 DEF_tb_cycle_8_EQ_0___d89;
  tUInt8 DEF_tb_cycle_8_EQ_16384___d90;
  tUInt32 DEF_x__h3022;
  DEF_x__h2771 = INST_tb_read_count.METH_read();
  DEF_x__h3022 = INST_tb_cycle.METH_read();
  DEF_tb_cycle_8_EQ_16384___d90 = DEF_x__h3022 == 16384u;
  DEF_tb_cycle_8_EQ_0___d89 = DEF_x__h3022 == 0u;
  DEF_tb_read_count_9_EQ_128___d70 = DEF_x__h2771 == 128u;
  DEF_x__h3018 = DEF_x__h3022 + 1u;
  if (DEF_tb_cycle_8_EQ_0___d89)
    INST_tb_randomA_initialized.METH_write((tUInt8)1u);
  if (DEF_tb_cycle_8_EQ_0___d89)
    INST_tb_randomB_initialized.METH_write((tUInt8)1u);
  if (!(PORT_RST_N == (tUInt8)0u))
  {
    if (DEF_tb_read_count_9_EQ_128___d70)
      dollar_display(sim_hdl, this, "s,32,32", &__str_literal_7, DEF_x__h2771, DEF_x__h3022);
    if (DEF_tb_read_count_9_EQ_128___d70)
      dollar_finish(sim_hdl, "32", 1u);
    if (DEF_tb_cycle_8_EQ_16384___d90)
      dollar_display(sim_hdl, this, "s", &__str_literal_8);
    if (DEF_tb_cycle_8_EQ_16384___d90)
      dollar_finish(sim_hdl, "32", 1u);
  }
  INST_tb_cycle.METH_write(DEF_x__h3018);
}


/* Methods */


/* Reset routines */

void MOD_mkTbEx9a::reset_RST_N(tUInt8 ARG_rst_in)
{
  PORT_RST_N = ARG_rst_in;
  INST_tb_read_count.reset_RST(ARG_rst_in);
  INST_tb_randomB_initialized.reset_RST(ARG_rst_in);
  INST_tb_randomA_initialized.reset_RST(ARG_rst_in);
  INST_tb_operands_fifo.reset_RST(ARG_rst_in);
  INST_tb_feed_count.reset_RST(ARG_rst_in);
  INST_tb_cycle.reset_RST(ARG_rst_in);
  INST_mod_i.reset_RST(ARG_rst_in);
}


/* Static handles to reset routines */


/* Functions for the parent module to register its reset fns */


/* Functions to set the elaborated clock id */

void MOD_mkTbEx9a::set_clk_0(char const *s)
{
  __clk_handle_0 = bk_get_or_define_clock(sim_hdl, s);
}


/* State dumping routine */
void MOD_mkTbEx9a::dump_state(unsigned int indent)
{
  printf("%*s%s:\n", indent, "", inst_name);
  INST_mod_i.dump_state(indent + 2u);
  INST_mod_m_neg.dump_state(indent + 2u);
  INST_mod_m_pos.dump_state(indent + 2u);
  INST_mod_p.dump_state(indent + 2u);
  INST_tb_cycle.dump_state(indent + 2u);
  INST_tb_feed_count.dump_state(indent + 2u);
  INST_tb_operands_fifo.dump_state(indent + 2u);
  INST_tb_randomA_ignore.dump_state(indent + 2u);
  INST_tb_randomA_initialized.dump_state(indent + 2u);
  INST_tb_randomA_zaz.dump_state(indent + 2u);
  INST_tb_randomB_ignore.dump_state(indent + 2u);
  INST_tb_randomB_initialized.dump_state(indent + 2u);
  INST_tb_randomB_zaz.dump_state(indent + 2u);
  INST_tb_read_count.dump_state(indent + 2u);
}


/* VCD dumping routines */

unsigned int MOD_mkTbEx9a::dump_VCD_defs(unsigned int levels)
{
  vcd_write_scope_start(sim_hdl, inst_name);
  vcd_num = vcd_reserve_ids(sim_hdl, 62u);
  unsigned int num = vcd_num;
  for (unsigned int clk = 0u; clk < bk_num_clocks(sim_hdl); ++clk)
    vcd_add_clock_def(sim_hdl, this, bk_clock_name(sim_hdl, clk), bk_clock_vcd_num(sim_hdl, clk));
  vcd_write_def(sim_hdl, bk_clock_vcd_num(sim_hdl, __clk_handle_0), "CLK", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_mod_mul_step", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_tb_feed", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_tb_monitor_test", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_tb_randomA_every", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_tb_randomA_every_1", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_tb_randomB_every", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_tb_randomB_every_1", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_tb_read", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "IF_tb_randomA_zaz_whas__2_THEN_tb_randomA_zaz__ETC___d41", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "IF_tb_randomB_zaz_whas__8_THEN_tb_randomB_zaz__ETC___d42", 1u);
  vcd_write_def(sim_hdl, num++, "RST_N", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "SEXT_tb_operands_fifo_first__4_BITS_63_TO_32_5_ETC___d79", 128u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_mod_mul_step", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_tb_feed", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_tb_monitor_test", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_tb_randomA_every", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_tb_randomA_every_1", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_tb_randomB_every", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_tb_randomB_every_1", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_tb_read", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "mod_m_neg_BITS_64_TO_0___h334", 65u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "mod_m_pos_BITS_64_TO_0___h310", 65u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "mod_p_PLUS_mod_m_neg_7_BITS_64_TO_0_0_CONCAT_0_1___d22", 66u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "mod_p_PLUS_mod_m_neg_7___d18", 66u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "mod_p_PLUS_mod_m_pos_BITS_64_TO_0_1_CONCAT_0_2___d13", 66u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "mod_p_PLUS_mod_m_pos___d9", 66u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "mod_p__h2342", 66u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "new_value__h1329", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "new_value__h902", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "tb_randomA_zaz_whas____d32", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "tb_read_count_9_EQ_128___d70", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "temp_p__h175", 66u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "v__h1367", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "v__h941", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "x__h1620", 66u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "x__h189", 66u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "x__h1904", 66u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "x__h2194", 66u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "x__h2242", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "x__h2771", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "x__h343", 6u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "x__h347", 6u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "x_wget__h1193", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "x_wget__h766", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "y__h288", 66u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "y__h296", 66u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "y__h322", 66u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "y__h330", 66u);
  num = INST_mod_i.dump_VCD_defs(num);
  num = INST_mod_m_neg.dump_VCD_defs(num);
  num = INST_mod_m_pos.dump_VCD_defs(num);
  num = INST_mod_p.dump_VCD_defs(num);
  num = INST_tb_cycle.dump_VCD_defs(num);
  num = INST_tb_feed_count.dump_VCD_defs(num);
  num = INST_tb_operands_fifo.dump_VCD_defs(num);
  num = INST_tb_randomA_ignore.dump_VCD_defs(num);
  num = INST_tb_randomA_initialized.dump_VCD_defs(num);
  num = INST_tb_randomA_zaz.dump_VCD_defs(num);
  num = INST_tb_randomB_ignore.dump_VCD_defs(num);
  num = INST_tb_randomB_initialized.dump_VCD_defs(num);
  num = INST_tb_randomB_zaz.dump_VCD_defs(num);
  num = INST_tb_read_count.dump_VCD_defs(num);
  vcd_write_scope_end(sim_hdl);
  return num;
}

void MOD_mkTbEx9a::dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkTbEx9a &backing)
{
  vcd_defs(dt, backing);
  vcd_prims(dt, backing);
}

void MOD_mkTbEx9a::vcd_defs(tVCDDumpType dt, MOD_mkTbEx9a &backing)
{
  unsigned int num = vcd_num;
  if (dt == VCD_DUMP_XS)
  {
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 128u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 65u);
    vcd_write_x(sim_hdl, num++, 65u);
    vcd_write_x(sim_hdl, num++, 66u);
    vcd_write_x(sim_hdl, num++, 66u);
    vcd_write_x(sim_hdl, num++, 66u);
    vcd_write_x(sim_hdl, num++, 66u);
    vcd_write_x(sim_hdl, num++, 66u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 66u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 66u);
    vcd_write_x(sim_hdl, num++, 66u);
    vcd_write_x(sim_hdl, num++, 66u);
    vcd_write_x(sim_hdl, num++, 66u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 6u);
    vcd_write_x(sim_hdl, num++, 6u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 66u);
    vcd_write_x(sim_hdl, num++, 66u);
    vcd_write_x(sim_hdl, num++, 66u);
    vcd_write_x(sim_hdl, num++, 66u);
  }
  else
    if (dt == VCD_DUMP_CHANGES)
    {
      if ((backing.DEF_CAN_FIRE_RL_mod_mul_step) != DEF_CAN_FIRE_RL_mod_mul_step)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_mod_mul_step, 1u);
	backing.DEF_CAN_FIRE_RL_mod_mul_step = DEF_CAN_FIRE_RL_mod_mul_step;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_tb_feed) != DEF_CAN_FIRE_RL_tb_feed)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_tb_feed, 1u);
	backing.DEF_CAN_FIRE_RL_tb_feed = DEF_CAN_FIRE_RL_tb_feed;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_tb_monitor_test) != DEF_CAN_FIRE_RL_tb_monitor_test)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_tb_monitor_test, 1u);
	backing.DEF_CAN_FIRE_RL_tb_monitor_test = DEF_CAN_FIRE_RL_tb_monitor_test;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_tb_randomA_every) != DEF_CAN_FIRE_RL_tb_randomA_every)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_tb_randomA_every, 1u);
	backing.DEF_CAN_FIRE_RL_tb_randomA_every = DEF_CAN_FIRE_RL_tb_randomA_every;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_tb_randomA_every_1) != DEF_CAN_FIRE_RL_tb_randomA_every_1)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_tb_randomA_every_1, 1u);
	backing.DEF_CAN_FIRE_RL_tb_randomA_every_1 = DEF_CAN_FIRE_RL_tb_randomA_every_1;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_tb_randomB_every) != DEF_CAN_FIRE_RL_tb_randomB_every)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_tb_randomB_every, 1u);
	backing.DEF_CAN_FIRE_RL_tb_randomB_every = DEF_CAN_FIRE_RL_tb_randomB_every;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_tb_randomB_every_1) != DEF_CAN_FIRE_RL_tb_randomB_every_1)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_tb_randomB_every_1, 1u);
	backing.DEF_CAN_FIRE_RL_tb_randomB_every_1 = DEF_CAN_FIRE_RL_tb_randomB_every_1;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_tb_read) != DEF_CAN_FIRE_RL_tb_read)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_tb_read, 1u);
	backing.DEF_CAN_FIRE_RL_tb_read = DEF_CAN_FIRE_RL_tb_read;
      }
      ++num;
      if ((backing.DEF_IF_tb_randomA_zaz_whas__2_THEN_tb_randomA_zaz__ETC___d41) != DEF_IF_tb_randomA_zaz_whas__2_THEN_tb_randomA_zaz__ETC___d41)
      {
	vcd_write_val(sim_hdl, num, DEF_IF_tb_randomA_zaz_whas__2_THEN_tb_randomA_zaz__ETC___d41, 1u);
	backing.DEF_IF_tb_randomA_zaz_whas__2_THEN_tb_randomA_zaz__ETC___d41 = DEF_IF_tb_randomA_zaz_whas__2_THEN_tb_randomA_zaz__ETC___d41;
      }
      ++num;
      if ((backing.DEF_IF_tb_randomB_zaz_whas__8_THEN_tb_randomB_zaz__ETC___d42) != DEF_IF_tb_randomB_zaz_whas__8_THEN_tb_randomB_zaz__ETC___d42)
      {
	vcd_write_val(sim_hdl, num, DEF_IF_tb_randomB_zaz_whas__8_THEN_tb_randomB_zaz__ETC___d42, 1u);
	backing.DEF_IF_tb_randomB_zaz_whas__8_THEN_tb_randomB_zaz__ETC___d42 = DEF_IF_tb_randomB_zaz_whas__8_THEN_tb_randomB_zaz__ETC___d42;
      }
      ++num;
      if ((backing.PORT_RST_N) != PORT_RST_N)
      {
	vcd_write_val(sim_hdl, num, PORT_RST_N, 1u);
	backing.PORT_RST_N = PORT_RST_N;
      }
      ++num;
      if ((backing.DEF_SEXT_tb_operands_fifo_first__4_BITS_63_TO_32_5_ETC___d79) != DEF_SEXT_tb_operands_fifo_first__4_BITS_63_TO_32_5_ETC___d79)
      {
	vcd_write_val(sim_hdl, num, DEF_SEXT_tb_operands_fifo_first__4_BITS_63_TO_32_5_ETC___d79, 128u);
	backing.DEF_SEXT_tb_operands_fifo_first__4_BITS_63_TO_32_5_ETC___d79 = DEF_SEXT_tb_operands_fifo_first__4_BITS_63_TO_32_5_ETC___d79;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_mod_mul_step) != DEF_WILL_FIRE_RL_mod_mul_step)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_mod_mul_step, 1u);
	backing.DEF_WILL_FIRE_RL_mod_mul_step = DEF_WILL_FIRE_RL_mod_mul_step;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_tb_feed) != DEF_WILL_FIRE_RL_tb_feed)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_tb_feed, 1u);
	backing.DEF_WILL_FIRE_RL_tb_feed = DEF_WILL_FIRE_RL_tb_feed;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_tb_monitor_test) != DEF_WILL_FIRE_RL_tb_monitor_test)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_tb_monitor_test, 1u);
	backing.DEF_WILL_FIRE_RL_tb_monitor_test = DEF_WILL_FIRE_RL_tb_monitor_test;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_tb_randomA_every) != DEF_WILL_FIRE_RL_tb_randomA_every)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_tb_randomA_every, 1u);
	backing.DEF_WILL_FIRE_RL_tb_randomA_every = DEF_WILL_FIRE_RL_tb_randomA_every;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_tb_randomA_every_1) != DEF_WILL_FIRE_RL_tb_randomA_every_1)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_tb_randomA_every_1, 1u);
	backing.DEF_WILL_FIRE_RL_tb_randomA_every_1 = DEF_WILL_FIRE_RL_tb_randomA_every_1;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_tb_randomB_every) != DEF_WILL_FIRE_RL_tb_randomB_every)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_tb_randomB_every, 1u);
	backing.DEF_WILL_FIRE_RL_tb_randomB_every = DEF_WILL_FIRE_RL_tb_randomB_every;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_tb_randomB_every_1) != DEF_WILL_FIRE_RL_tb_randomB_every_1)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_tb_randomB_every_1, 1u);
	backing.DEF_WILL_FIRE_RL_tb_randomB_every_1 = DEF_WILL_FIRE_RL_tb_randomB_every_1;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_tb_read) != DEF_WILL_FIRE_RL_tb_read)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_tb_read, 1u);
	backing.DEF_WILL_FIRE_RL_tb_read = DEF_WILL_FIRE_RL_tb_read;
      }
      ++num;
      if ((backing.DEF_mod_m_neg_BITS_64_TO_0___h334) != DEF_mod_m_neg_BITS_64_TO_0___h334)
      {
	vcd_write_val(sim_hdl, num, DEF_mod_m_neg_BITS_64_TO_0___h334, 65u);
	backing.DEF_mod_m_neg_BITS_64_TO_0___h334 = DEF_mod_m_neg_BITS_64_TO_0___h334;
      }
      ++num;
      if ((backing.DEF_mod_m_pos_BITS_64_TO_0___h310) != DEF_mod_m_pos_BITS_64_TO_0___h310)
      {
	vcd_write_val(sim_hdl, num, DEF_mod_m_pos_BITS_64_TO_0___h310, 65u);
	backing.DEF_mod_m_pos_BITS_64_TO_0___h310 = DEF_mod_m_pos_BITS_64_TO_0___h310;
      }
      ++num;
      if ((backing.DEF_mod_p_PLUS_mod_m_neg_7_BITS_64_TO_0_0_CONCAT_0_1___d22) != DEF_mod_p_PLUS_mod_m_neg_7_BITS_64_TO_0_0_CONCAT_0_1___d22)
      {
	vcd_write_val(sim_hdl, num, DEF_mod_p_PLUS_mod_m_neg_7_BITS_64_TO_0_0_CONCAT_0_1___d22, 66u);
	backing.DEF_mod_p_PLUS_mod_m_neg_7_BITS_64_TO_0_0_CONCAT_0_1___d22 = DEF_mod_p_PLUS_mod_m_neg_7_BITS_64_TO_0_0_CONCAT_0_1___d22;
      }
      ++num;
      if ((backing.DEF_mod_p_PLUS_mod_m_neg_7___d18) != DEF_mod_p_PLUS_mod_m_neg_7___d18)
      {
	vcd_write_val(sim_hdl, num, DEF_mod_p_PLUS_mod_m_neg_7___d18, 66u);
	backing.DEF_mod_p_PLUS_mod_m_neg_7___d18 = DEF_mod_p_PLUS_mod_m_neg_7___d18;
      }
      ++num;
      if ((backing.DEF_mod_p_PLUS_mod_m_pos_BITS_64_TO_0_1_CONCAT_0_2___d13) != DEF_mod_p_PLUS_mod_m_pos_BITS_64_TO_0_1_CONCAT_0_2___d13)
      {
	vcd_write_val(sim_hdl, num, DEF_mod_p_PLUS_mod_m_pos_BITS_64_TO_0_1_CONCAT_0_2___d13, 66u);
	backing.DEF_mod_p_PLUS_mod_m_pos_BITS_64_TO_0_1_CONCAT_0_2___d13 = DEF_mod_p_PLUS_mod_m_pos_BITS_64_TO_0_1_CONCAT_0_2___d13;
      }
      ++num;
      if ((backing.DEF_mod_p_PLUS_mod_m_pos___d9) != DEF_mod_p_PLUS_mod_m_pos___d9)
      {
	vcd_write_val(sim_hdl, num, DEF_mod_p_PLUS_mod_m_pos___d9, 66u);
	backing.DEF_mod_p_PLUS_mod_m_pos___d9 = DEF_mod_p_PLUS_mod_m_pos___d9;
      }
      ++num;
      if ((backing.DEF_mod_p__h2342) != DEF_mod_p__h2342)
      {
	vcd_write_val(sim_hdl, num, DEF_mod_p__h2342, 66u);
	backing.DEF_mod_p__h2342 = DEF_mod_p__h2342;
      }
      ++num;
      if ((backing.DEF_new_value__h1329) != DEF_new_value__h1329)
      {
	vcd_write_val(sim_hdl, num, DEF_new_value__h1329, 32u);
	backing.DEF_new_value__h1329 = DEF_new_value__h1329;
      }
      ++num;
      if ((backing.DEF_new_value__h902) != DEF_new_value__h902)
      {
	vcd_write_val(sim_hdl, num, DEF_new_value__h902, 32u);
	backing.DEF_new_value__h902 = DEF_new_value__h902;
      }
      ++num;
      if ((backing.DEF_tb_randomA_zaz_whas____d32) != DEF_tb_randomA_zaz_whas____d32)
      {
	vcd_write_val(sim_hdl, num, DEF_tb_randomA_zaz_whas____d32, 1u);
	backing.DEF_tb_randomA_zaz_whas____d32 = DEF_tb_randomA_zaz_whas____d32;
      }
      ++num;
      if ((backing.DEF_tb_read_count_9_EQ_128___d70) != DEF_tb_read_count_9_EQ_128___d70)
      {
	vcd_write_val(sim_hdl, num, DEF_tb_read_count_9_EQ_128___d70, 1u);
	backing.DEF_tb_read_count_9_EQ_128___d70 = DEF_tb_read_count_9_EQ_128___d70;
      }
      ++num;
      if ((backing.DEF_temp_p__h175) != DEF_temp_p__h175)
      {
	vcd_write_val(sim_hdl, num, DEF_temp_p__h175, 66u);
	backing.DEF_temp_p__h175 = DEF_temp_p__h175;
      }
      ++num;
      if ((backing.DEF_v__h1367) != DEF_v__h1367)
      {
	vcd_write_val(sim_hdl, num, DEF_v__h1367, 32u);
	backing.DEF_v__h1367 = DEF_v__h1367;
      }
      ++num;
      if ((backing.DEF_v__h941) != DEF_v__h941)
      {
	vcd_write_val(sim_hdl, num, DEF_v__h941, 32u);
	backing.DEF_v__h941 = DEF_v__h941;
      }
      ++num;
      if ((backing.DEF_x__h1620) != DEF_x__h1620)
      {
	vcd_write_val(sim_hdl, num, DEF_x__h1620, 66u);
	backing.DEF_x__h1620 = DEF_x__h1620;
      }
      ++num;
      if ((backing.DEF_x__h189) != DEF_x__h189)
      {
	vcd_write_val(sim_hdl, num, DEF_x__h189, 66u);
	backing.DEF_x__h189 = DEF_x__h189;
      }
      ++num;
      if ((backing.DEF_x__h1904) != DEF_x__h1904)
      {
	vcd_write_val(sim_hdl, num, DEF_x__h1904, 66u);
	backing.DEF_x__h1904 = DEF_x__h1904;
      }
      ++num;
      if ((backing.DEF_x__h2194) != DEF_x__h2194)
      {
	vcd_write_val(sim_hdl, num, DEF_x__h2194, 66u);
	backing.DEF_x__h2194 = DEF_x__h2194;
      }
      ++num;
      if ((backing.DEF_x__h2242) != DEF_x__h2242)
      {
	vcd_write_val(sim_hdl, num, DEF_x__h2242, 32u);
	backing.DEF_x__h2242 = DEF_x__h2242;
      }
      ++num;
      if ((backing.DEF_x__h2771) != DEF_x__h2771)
      {
	vcd_write_val(sim_hdl, num, DEF_x__h2771, 32u);
	backing.DEF_x__h2771 = DEF_x__h2771;
      }
      ++num;
      if ((backing.DEF_x__h343) != DEF_x__h343)
      {
	vcd_write_val(sim_hdl, num, DEF_x__h343, 6u);
	backing.DEF_x__h343 = DEF_x__h343;
      }
      ++num;
      if ((backing.DEF_x__h347) != DEF_x__h347)
      {
	vcd_write_val(sim_hdl, num, DEF_x__h347, 6u);
	backing.DEF_x__h347 = DEF_x__h347;
      }
      ++num;
      if ((backing.DEF_x_wget__h1193) != DEF_x_wget__h1193)
      {
	vcd_write_val(sim_hdl, num, DEF_x_wget__h1193, 32u);
	backing.DEF_x_wget__h1193 = DEF_x_wget__h1193;
      }
      ++num;
      if ((backing.DEF_x_wget__h766) != DEF_x_wget__h766)
      {
	vcd_write_val(sim_hdl, num, DEF_x_wget__h766, 32u);
	backing.DEF_x_wget__h766 = DEF_x_wget__h766;
      }
      ++num;
      if ((backing.DEF_y__h288) != DEF_y__h288)
      {
	vcd_write_val(sim_hdl, num, DEF_y__h288, 66u);
	backing.DEF_y__h288 = DEF_y__h288;
      }
      ++num;
      if ((backing.DEF_y__h296) != DEF_y__h296)
      {
	vcd_write_val(sim_hdl, num, DEF_y__h296, 66u);
	backing.DEF_y__h296 = DEF_y__h296;
      }
      ++num;
      if ((backing.DEF_y__h322) != DEF_y__h322)
      {
	vcd_write_val(sim_hdl, num, DEF_y__h322, 66u);
	backing.DEF_y__h322 = DEF_y__h322;
      }
      ++num;
      if ((backing.DEF_y__h330) != DEF_y__h330)
      {
	vcd_write_val(sim_hdl, num, DEF_y__h330, 66u);
	backing.DEF_y__h330 = DEF_y__h330;
      }
      ++num;
    }
    else
    {
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_mod_mul_step, 1u);
      backing.DEF_CAN_FIRE_RL_mod_mul_step = DEF_CAN_FIRE_RL_mod_mul_step;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_tb_feed, 1u);
      backing.DEF_CAN_FIRE_RL_tb_feed = DEF_CAN_FIRE_RL_tb_feed;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_tb_monitor_test, 1u);
      backing.DEF_CAN_FIRE_RL_tb_monitor_test = DEF_CAN_FIRE_RL_tb_monitor_test;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_tb_randomA_every, 1u);
      backing.DEF_CAN_FIRE_RL_tb_randomA_every = DEF_CAN_FIRE_RL_tb_randomA_every;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_tb_randomA_every_1, 1u);
      backing.DEF_CAN_FIRE_RL_tb_randomA_every_1 = DEF_CAN_FIRE_RL_tb_randomA_every_1;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_tb_randomB_every, 1u);
      backing.DEF_CAN_FIRE_RL_tb_randomB_every = DEF_CAN_FIRE_RL_tb_randomB_every;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_tb_randomB_every_1, 1u);
      backing.DEF_CAN_FIRE_RL_tb_randomB_every_1 = DEF_CAN_FIRE_RL_tb_randomB_every_1;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_tb_read, 1u);
      backing.DEF_CAN_FIRE_RL_tb_read = DEF_CAN_FIRE_RL_tb_read;
      vcd_write_val(sim_hdl, num++, DEF_IF_tb_randomA_zaz_whas__2_THEN_tb_randomA_zaz__ETC___d41, 1u);
      backing.DEF_IF_tb_randomA_zaz_whas__2_THEN_tb_randomA_zaz__ETC___d41 = DEF_IF_tb_randomA_zaz_whas__2_THEN_tb_randomA_zaz__ETC___d41;
      vcd_write_val(sim_hdl, num++, DEF_IF_tb_randomB_zaz_whas__8_THEN_tb_randomB_zaz__ETC___d42, 1u);
      backing.DEF_IF_tb_randomB_zaz_whas__8_THEN_tb_randomB_zaz__ETC___d42 = DEF_IF_tb_randomB_zaz_whas__8_THEN_tb_randomB_zaz__ETC___d42;
      vcd_write_val(sim_hdl, num++, PORT_RST_N, 1u);
      backing.PORT_RST_N = PORT_RST_N;
      vcd_write_val(sim_hdl, num++, DEF_SEXT_tb_operands_fifo_first__4_BITS_63_TO_32_5_ETC___d79, 128u);
      backing.DEF_SEXT_tb_operands_fifo_first__4_BITS_63_TO_32_5_ETC___d79 = DEF_SEXT_tb_operands_fifo_first__4_BITS_63_TO_32_5_ETC___d79;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_mod_mul_step, 1u);
      backing.DEF_WILL_FIRE_RL_mod_mul_step = DEF_WILL_FIRE_RL_mod_mul_step;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_tb_feed, 1u);
      backing.DEF_WILL_FIRE_RL_tb_feed = DEF_WILL_FIRE_RL_tb_feed;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_tb_monitor_test, 1u);
      backing.DEF_WILL_FIRE_RL_tb_monitor_test = DEF_WILL_FIRE_RL_tb_monitor_test;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_tb_randomA_every, 1u);
      backing.DEF_WILL_FIRE_RL_tb_randomA_every = DEF_WILL_FIRE_RL_tb_randomA_every;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_tb_randomA_every_1, 1u);
      backing.DEF_WILL_FIRE_RL_tb_randomA_every_1 = DEF_WILL_FIRE_RL_tb_randomA_every_1;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_tb_randomB_every, 1u);
      backing.DEF_WILL_FIRE_RL_tb_randomB_every = DEF_WILL_FIRE_RL_tb_randomB_every;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_tb_randomB_every_1, 1u);
      backing.DEF_WILL_FIRE_RL_tb_randomB_every_1 = DEF_WILL_FIRE_RL_tb_randomB_every_1;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_tb_read, 1u);
      backing.DEF_WILL_FIRE_RL_tb_read = DEF_WILL_FIRE_RL_tb_read;
      vcd_write_val(sim_hdl, num++, DEF_mod_m_neg_BITS_64_TO_0___h334, 65u);
      backing.DEF_mod_m_neg_BITS_64_TO_0___h334 = DEF_mod_m_neg_BITS_64_TO_0___h334;
      vcd_write_val(sim_hdl, num++, DEF_mod_m_pos_BITS_64_TO_0___h310, 65u);
      backing.DEF_mod_m_pos_BITS_64_TO_0___h310 = DEF_mod_m_pos_BITS_64_TO_0___h310;
      vcd_write_val(sim_hdl, num++, DEF_mod_p_PLUS_mod_m_neg_7_BITS_64_TO_0_0_CONCAT_0_1___d22, 66u);
      backing.DEF_mod_p_PLUS_mod_m_neg_7_BITS_64_TO_0_0_CONCAT_0_1___d22 = DEF_mod_p_PLUS_mod_m_neg_7_BITS_64_TO_0_0_CONCAT_0_1___d22;
      vcd_write_val(sim_hdl, num++, DEF_mod_p_PLUS_mod_m_neg_7___d18, 66u);
      backing.DEF_mod_p_PLUS_mod_m_neg_7___d18 = DEF_mod_p_PLUS_mod_m_neg_7___d18;
      vcd_write_val(sim_hdl, num++, DEF_mod_p_PLUS_mod_m_pos_BITS_64_TO_0_1_CONCAT_0_2___d13, 66u);
      backing.DEF_mod_p_PLUS_mod_m_pos_BITS_64_TO_0_1_CONCAT_0_2___d13 = DEF_mod_p_PLUS_mod_m_pos_BITS_64_TO_0_1_CONCAT_0_2___d13;
      vcd_write_val(sim_hdl, num++, DEF_mod_p_PLUS_mod_m_pos___d9, 66u);
      backing.DEF_mod_p_PLUS_mod_m_pos___d9 = DEF_mod_p_PLUS_mod_m_pos___d9;
      vcd_write_val(sim_hdl, num++, DEF_mod_p__h2342, 66u);
      backing.DEF_mod_p__h2342 = DEF_mod_p__h2342;
      vcd_write_val(sim_hdl, num++, DEF_new_value__h1329, 32u);
      backing.DEF_new_value__h1329 = DEF_new_value__h1329;
      vcd_write_val(sim_hdl, num++, DEF_new_value__h902, 32u);
      backing.DEF_new_value__h902 = DEF_new_value__h902;
      vcd_write_val(sim_hdl, num++, DEF_tb_randomA_zaz_whas____d32, 1u);
      backing.DEF_tb_randomA_zaz_whas____d32 = DEF_tb_randomA_zaz_whas____d32;
      vcd_write_val(sim_hdl, num++, DEF_tb_read_count_9_EQ_128___d70, 1u);
      backing.DEF_tb_read_count_9_EQ_128___d70 = DEF_tb_read_count_9_EQ_128___d70;
      vcd_write_val(sim_hdl, num++, DEF_temp_p__h175, 66u);
      backing.DEF_temp_p__h175 = DEF_temp_p__h175;
      vcd_write_val(sim_hdl, num++, DEF_v__h1367, 32u);
      backing.DEF_v__h1367 = DEF_v__h1367;
      vcd_write_val(sim_hdl, num++, DEF_v__h941, 32u);
      backing.DEF_v__h941 = DEF_v__h941;
      vcd_write_val(sim_hdl, num++, DEF_x__h1620, 66u);
      backing.DEF_x__h1620 = DEF_x__h1620;
      vcd_write_val(sim_hdl, num++, DEF_x__h189, 66u);
      backing.DEF_x__h189 = DEF_x__h189;
      vcd_write_val(sim_hdl, num++, DEF_x__h1904, 66u);
      backing.DEF_x__h1904 = DEF_x__h1904;
      vcd_write_val(sim_hdl, num++, DEF_x__h2194, 66u);
      backing.DEF_x__h2194 = DEF_x__h2194;
      vcd_write_val(sim_hdl, num++, DEF_x__h2242, 32u);
      backing.DEF_x__h2242 = DEF_x__h2242;
      vcd_write_val(sim_hdl, num++, DEF_x__h2771, 32u);
      backing.DEF_x__h2771 = DEF_x__h2771;
      vcd_write_val(sim_hdl, num++, DEF_x__h343, 6u);
      backing.DEF_x__h343 = DEF_x__h343;
      vcd_write_val(sim_hdl, num++, DEF_x__h347, 6u);
      backing.DEF_x__h347 = DEF_x__h347;
      vcd_write_val(sim_hdl, num++, DEF_x_wget__h1193, 32u);
      backing.DEF_x_wget__h1193 = DEF_x_wget__h1193;
      vcd_write_val(sim_hdl, num++, DEF_x_wget__h766, 32u);
      backing.DEF_x_wget__h766 = DEF_x_wget__h766;
      vcd_write_val(sim_hdl, num++, DEF_y__h288, 66u);
      backing.DEF_y__h288 = DEF_y__h288;
      vcd_write_val(sim_hdl, num++, DEF_y__h296, 66u);
      backing.DEF_y__h296 = DEF_y__h296;
      vcd_write_val(sim_hdl, num++, DEF_y__h322, 66u);
      backing.DEF_y__h322 = DEF_y__h322;
      vcd_write_val(sim_hdl, num++, DEF_y__h330, 66u);
      backing.DEF_y__h330 = DEF_y__h330;
    }
}

void MOD_mkTbEx9a::vcd_prims(tVCDDumpType dt, MOD_mkTbEx9a &backing)
{
  INST_mod_i.dump_VCD(dt, backing.INST_mod_i);
  INST_mod_m_neg.dump_VCD(dt, backing.INST_mod_m_neg);
  INST_mod_m_pos.dump_VCD(dt, backing.INST_mod_m_pos);
  INST_mod_p.dump_VCD(dt, backing.INST_mod_p);
  INST_tb_cycle.dump_VCD(dt, backing.INST_tb_cycle);
  INST_tb_feed_count.dump_VCD(dt, backing.INST_tb_feed_count);
  INST_tb_operands_fifo.dump_VCD(dt, backing.INST_tb_operands_fifo);
  INST_tb_randomA_ignore.dump_VCD(dt, backing.INST_tb_randomA_ignore);
  INST_tb_randomA_initialized.dump_VCD(dt, backing.INST_tb_randomA_initialized);
  INST_tb_randomA_zaz.dump_VCD(dt, backing.INST_tb_randomA_zaz);
  INST_tb_randomB_ignore.dump_VCD(dt, backing.INST_tb_randomB_ignore);
  INST_tb_randomB_initialized.dump_VCD(dt, backing.INST_tb_randomB_initialized);
  INST_tb_randomB_zaz.dump_VCD(dt, backing.INST_tb_randomB_zaz);
  INST_tb_read_count.dump_VCD(dt, backing.INST_tb_read_count);
}
