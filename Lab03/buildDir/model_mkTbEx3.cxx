/*
 * Generated by Bluespec Compiler (build 14ff62d)
 * 
 * On Sat Jul  1 04:52:20 CST 2023
 * 
 */
#include "bluesim_primitives.h"
#include "model_mkTbEx3.h"

#include <cstdlib>
#include <time.h>
#include "bluesim_kernel_api.h"
#include "bs_vcd.h"
#include "bs_reset.h"


/* Constructor */
MODEL_mkTbEx3::MODEL_mkTbEx3()
{
  mkTbEx3_instance = NULL;
}

/* Function for creating a new model */
void * new_MODEL_mkTbEx3()
{
  MODEL_mkTbEx3 *model = new MODEL_mkTbEx3();
  return (void *)(model);
}

/* Schedule functions */

static void schedule_posedge_CLK(tSimStateHdl simHdl, void *instance_ptr)
       {
	 MOD_mkTbEx3 &INST_top = *((MOD_mkTbEx3 *)(instance_ptr));
	 tUInt8 DEF_INST_top_DEF_tb_randomA_initialized__h404;
	 tUInt8 DEF_INST_top_DEF_tb_randomB_initialized__h793;
	 INST_top.DEF_CAN_FIRE_RL_tb_randomA_every = (tUInt8)1u;
	 INST_top.DEF_WILL_FIRE_RL_tb_randomA_every = INST_top.DEF_CAN_FIRE_RL_tb_randomA_every;
	 DEF_INST_top_DEF_tb_randomA_initialized__h404 = INST_top.INST_tb_randomA_initialized.METH_read();
	 INST_top.DEF_CAN_FIRE_RL_tb_randomA_every_1 = !DEF_INST_top_DEF_tb_randomA_initialized__h404;
	 INST_top.DEF_WILL_FIRE_RL_tb_randomA_every_1 = INST_top.DEF_CAN_FIRE_RL_tb_randomA_every_1;
	 INST_top.DEF_CAN_FIRE_RL_tb_randomB_every = (tUInt8)1u;
	 INST_top.DEF_WILL_FIRE_RL_tb_randomB_every = INST_top.DEF_CAN_FIRE_RL_tb_randomB_every;
	 DEF_INST_top_DEF_tb_randomB_initialized__h793 = INST_top.INST_tb_randomB_initialized.METH_read();
	 INST_top.DEF_CAN_FIRE_RL_tb_randomB_every_1 = !DEF_INST_top_DEF_tb_randomB_initialized__h793;
	 INST_top.DEF_WILL_FIRE_RL_tb_randomB_every_1 = INST_top.DEF_CAN_FIRE_RL_tb_randomB_every_1;
	 INST_top.DEF_x__h970 = INST_top.INST_tb_cycle.METH_read();
	 INST_top.DEF_tb_cycle_5_EQ_128___d17 = (INST_top.DEF_x__h970) == 128u;
	 INST_top.DEF_tb_cycle_5_EQ_0___d16 = (INST_top.DEF_x__h970) == 0u;
	 INST_top.DEF_CAN_FIRE_RL_tb_test = INST_top.DEF_tb_cycle_5_EQ_0___d16 || (INST_top.DEF_tb_cycle_5_EQ_128___d17 || (DEF_INST_top_DEF_tb_randomA_initialized__h404 && DEF_INST_top_DEF_tb_randomB_initialized__h793));
	 INST_top.DEF_WILL_FIRE_RL_tb_test = INST_top.DEF_CAN_FIRE_RL_tb_test;
	 if (INST_top.DEF_WILL_FIRE_RL_tb_randomA_every)
	   INST_top.RL_tb_randomA_every();
	 if (INST_top.DEF_WILL_FIRE_RL_tb_randomA_every_1)
	   INST_top.RL_tb_randomA_every_1();
	 if (INST_top.DEF_WILL_FIRE_RL_tb_randomB_every)
	   INST_top.RL_tb_randomB_every();
	 if (INST_top.DEF_WILL_FIRE_RL_tb_randomB_every_1)
	   INST_top.RL_tb_randomB_every_1();
	 if (INST_top.DEF_WILL_FIRE_RL_tb_test)
	   INST_top.RL_tb_test();
	 INST_top.INST_tb_randomB_zaz.clk((tUInt8)1u, (tUInt8)1u);
	 INST_top.INST_tb_randomB_ignore.clk((tUInt8)1u, (tUInt8)1u);
	 INST_top.INST_tb_randomA_zaz.clk((tUInt8)1u, (tUInt8)1u);
	 INST_top.INST_tb_randomA_ignore.clk((tUInt8)1u, (tUInt8)1u);
	 if (do_reset_ticks(simHdl))
	 {
	   INST_top.INST_tb_cycle.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_tb_randomA_initialized.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_tb_randomB_initialized.rst_tick__clk__1((tUInt8)1u);
	 }
       };

/* Model creation/destruction functions */

void MODEL_mkTbEx3::create_model(tSimStateHdl simHdl, bool master)
{
  sim_hdl = simHdl;
  init_reset_request_counters(sim_hdl);
  mkTbEx3_instance = new MOD_mkTbEx3(sim_hdl, "top", NULL);
  bk_get_or_define_clock(sim_hdl, "CLK");
  if (master)
  {
    bk_alter_clock(sim_hdl, bk_get_clock_by_name(sim_hdl, "CLK"), CLK_LOW, false, 0llu, 5llu, 5llu);
    bk_use_default_reset(sim_hdl);
  }
  bk_set_clock_event_fn(sim_hdl,
			bk_get_clock_by_name(sim_hdl, "CLK"),
			schedule_posedge_CLK,
			NULL,
			(tEdgeDirection)(POSEDGE));
  (mkTbEx3_instance->INST_tb_randomA_ignore.set_clk_0)("CLK");
  (mkTbEx3_instance->INST_tb_randomA_zaz.set_clk_0)("CLK");
  (mkTbEx3_instance->INST_tb_randomB_ignore.set_clk_0)("CLK");
  (mkTbEx3_instance->INST_tb_randomB_zaz.set_clk_0)("CLK");
  (mkTbEx3_instance->set_clk_0)("CLK");
}
void MODEL_mkTbEx3::destroy_model()
{
  delete mkTbEx3_instance;
  mkTbEx3_instance = NULL;
}
void MODEL_mkTbEx3::reset_model(bool asserted)
{
  (mkTbEx3_instance->reset_RST_N)(asserted ? (tUInt8)0u : (tUInt8)1u);
}
void * MODEL_mkTbEx3::get_instance()
{
  return mkTbEx3_instance;
}

/* Fill in version numbers */
void MODEL_mkTbEx3::get_version(unsigned int *year,
				unsigned int *month,
				char const **annotation,
				char const **build)
{
  *year = 0u;
  *month = 0u;
  *annotation = NULL;
  *build = "14ff62d";
}

/* Get the model creation time */
time_t MODEL_mkTbEx3::get_creation_time()
{
  
  /* Fri Jun 30 20:52:20 UTC 2023 */
  return 1688158340llu;
}

/* State dumping function */
void MODEL_mkTbEx3::dump_state()
{
  (mkTbEx3_instance->dump_state)(0u);
}

/* VCD dumping functions */
MOD_mkTbEx3 & mkTbEx3_backing(tSimStateHdl simHdl)
{
  static MOD_mkTbEx3 *instance = NULL;
  if (instance == NULL)
  {
    vcd_set_backing_instance(simHdl, true);
    instance = new MOD_mkTbEx3(simHdl, "top", NULL);
    vcd_set_backing_instance(simHdl, false);
  }
  return *instance;
}
void MODEL_mkTbEx3::dump_VCD_defs()
{
  (mkTbEx3_instance->dump_VCD_defs)(vcd_depth(sim_hdl));
}
void MODEL_mkTbEx3::dump_VCD(tVCDDumpType dt)
{
  (mkTbEx3_instance->dump_VCD)(dt, vcd_depth(sim_hdl), mkTbEx3_backing(sim_hdl));
}
