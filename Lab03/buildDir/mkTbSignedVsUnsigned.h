/*
 * Generated by Bluespec Compiler (build 14ff62d)
 * 
 * On Sat Jul  1 04:36:16 CST 2023
 * 
 */

/* Generation options: keep-fires */
#ifndef __mkTbSignedVsUnsigned_h__
#define __mkTbSignedVsUnsigned_h__

#include "bluesim_types.h"
#include "bs_module.h"
#include "bluesim_primitives.h"
#include "bs_vcd.h"


/* Class declaration for the mkTbSignedVsUnsigned module */
class MOD_mkTbSignedVsUnsigned : public Module {
 
 /* Clock handles */
 private:
  tClock __clk_handle_0;
 
 /* Clock gate handles */
 public:
  tUInt8 *clk_gate[0];
 
 /* Instantiation parameters */
 public:
 
 /* Module state */
 public:
  MOD_Reg<tUInt32> INST_tb_cycle;
  MOD_Wire<tUInt8> INST_tb_randomA_ignore;
  MOD_Reg<tUInt8> INST_tb_randomA_initialized;
  MOD_Wire<tUInt8> INST_tb_randomA_zaz;
  MOD_Wire<tUInt8> INST_tb_randomB_ignore;
  MOD_Reg<tUInt8> INST_tb_randomB_initialized;
  MOD_Wire<tUInt8> INST_tb_randomB_zaz;
 
 /* Constructor */
 public:
  MOD_mkTbSignedVsUnsigned(tSimStateHdl simHdl, char const *name, Module *parent);
 
 /* Symbol init methods */
 private:
  void init_symbols_0();
 
 /* Reset signal definitions */
 private:
  tUInt8 PORT_RST_N;
 
 /* Port definitions */
 public:
 
 /* Publicly accessible definitions */
 public:
  tUInt8 DEF_WILL_FIRE_RL_tb_test;
  tUInt8 DEF_CAN_FIRE_RL_tb_test;
  tUInt8 DEF_WILL_FIRE_RL_tb_randomB_every_1;
  tUInt8 DEF_CAN_FIRE_RL_tb_randomB_every_1;
  tUInt8 DEF_WILL_FIRE_RL_tb_randomB_every;
  tUInt8 DEF_CAN_FIRE_RL_tb_randomB_every;
  tUInt8 DEF_WILL_FIRE_RL_tb_randomA_every_1;
  tUInt8 DEF_CAN_FIRE_RL_tb_randomA_every_1;
  tUInt8 DEF_WILL_FIRE_RL_tb_randomA_every;
  tUInt8 DEF_CAN_FIRE_RL_tb_randomA_every;
  tUInt32 DEF_x__h970;
  tUInt8 DEF_tb_cycle_5_EQ_128___d17;
  tUInt8 DEF_tb_cycle_5_EQ_0___d16;
 
 /* Local definitions */
 private:
  tUInt32 DEF_v__h719;
  tUInt32 DEF_v__h329;
  tUInt8 DEF_v__h799;
  tUInt8 DEF_v__h410;
  tUInt8 DEF_x_wget__h662;
  tUInt8 DEF_x_wget__h264;
 
 /* Rules */
 public:
  void RL_tb_randomA_every();
  void RL_tb_randomA_every_1();
  void RL_tb_randomB_every();
  void RL_tb_randomB_every_1();
  void RL_tb_test();
 
 /* Methods */
 public:
 
 /* Reset routines */
 public:
  void reset_RST_N(tUInt8 ARG_rst_in);
 
 /* Static handles to reset routines */
 public:
 
 /* Pointers to reset fns in parent module for asserting output resets */
 private:
 
 /* Functions for the parent module to register its reset fns */
 public:
 
 /* Functions to set the elaborated clock id */
 public:
  void set_clk_0(char const *s);
 
 /* State dumping routine */
 public:
  void dump_state(unsigned int indent);
 
 /* VCD dumping routines */
 public:
  unsigned int dump_VCD_defs(unsigned int levels);
  void dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkTbSignedVsUnsigned &backing);
  void vcd_defs(tVCDDumpType dt, MOD_mkTbSignedVsUnsigned &backing);
  void vcd_prims(tVCDDumpType dt, MOD_mkTbSignedVsUnsigned &backing);
};

#endif /* ifndef __mkTbSignedVsUnsigned_h__ */
