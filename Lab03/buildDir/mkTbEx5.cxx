/*
 * Generated by Bluespec Compiler (build 14ff62d)
 * 
 * On Sat Jul  1 22:37:10 CST 2023
 * 
 */
#include "bluesim_primitives.h"
#include "mkTbEx5.h"
#include "imported_BDPI_functions.h"


/* String declarations */
static std::string const __str_literal_2("    if signed: %0d * %0d DUT gave %0d", 37u);
static std::string const __str_literal_5("    if signed: %0d * %0d DUT gave %0d instead of %0d",
					 52u);
static std::string const __str_literal_3("    if unsigned: %0d * %0d DUT gave %0d", 39u);
static std::string const __str_literal_6("    if unsigned: %0d * %0d DUT gave %0d instead of %0d",
					 54u);
static std::string const __str_literal_4("FAILED case %0d", 15u);
static std::string const __str_literal_8("FAILED due to cycle limit", 25u);
static std::string const __str_literal_7("PASSED %0d test cases in %0d cycles", 35u);
static std::string const __str_literal_1("PASSED case %0d", 15u);


/* Constructor */
MOD_mkTbEx5::MOD_mkTbEx5(tSimStateHdl simHdl, char const *name, Module *parent)
  : Module(simHdl, name, parent),
    __clk_handle_0(BAD_CLOCK_HANDLE),
    INST_mod_a(simHdl, "mod_a", this, 8u, (tUInt8)0u, (tUInt8)0u),
    INST_mod_b(simHdl, "mod_b", this, 8u, (tUInt8)0u, (tUInt8)0u),
    INST_mod_carry(simHdl, "mod_carry", this, 8u, (tUInt8)0u, (tUInt8)0u),
    INST_mod_i(simHdl, "mod_i", this, 4u, (tUInt8)9u, (tUInt8)0u),
    INST_mod_res(simHdl, "mod_res", this, 8u, (tUInt8)0u, (tUInt8)0u),
    INST_tb_cycle(simHdl, "tb_cycle", this, 32u, 0u, (tUInt8)0u),
    INST_tb_feed_count(simHdl, "tb_feed_count", this, 32u, 0u, (tUInt8)0u),
    INST_tb_operands_fifo(simHdl, "tb_operands_fifo", this, 16u, 4u, 1u, 0u),
    INST_tb_randomA_ignore(simHdl, "tb_randomA_ignore", this, 8u, (tUInt8)0u),
    INST_tb_randomA_initialized(simHdl, "tb_randomA_initialized", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_tb_randomA_zaz(simHdl, "tb_randomA_zaz", this, 8u, (tUInt8)0u),
    INST_tb_randomB_ignore(simHdl, "tb_randomB_ignore", this, 8u, (tUInt8)0u),
    INST_tb_randomB_initialized(simHdl, "tb_randomB_initialized", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_tb_randomB_zaz(simHdl, "tb_randomB_zaz", this, 8u, (tUInt8)0u),
    INST_tb_read_count(simHdl, "tb_read_count", this, 32u, 0u, (tUInt8)0u),
    PORT_RST_N((tUInt8)1u),
    DEF_v__h1270(2863311530u),
    DEF_v__h880(2863311530u)
{
  symbol_count = 46u;
  symbols = new tSym[symbol_count];
  init_symbols_0();
}


/* Symbol init fns */

void MOD_mkTbEx5::init_symbols_0()
{
  init_symbol(&symbols[0u], "CAN_FIRE_RL_mod_mulStep", SYM_DEF, &DEF_CAN_FIRE_RL_mod_mulStep, 1u);
  init_symbol(&symbols[1u], "CAN_FIRE_RL_tb_feed", SYM_DEF, &DEF_CAN_FIRE_RL_tb_feed, 1u);
  init_symbol(&symbols[2u],
	      "CAN_FIRE_RL_tb_monitor_test",
	      SYM_DEF,
	      &DEF_CAN_FIRE_RL_tb_monitor_test,
	      1u);
  init_symbol(&symbols[3u],
	      "CAN_FIRE_RL_tb_randomA_every",
	      SYM_DEF,
	      &DEF_CAN_FIRE_RL_tb_randomA_every,
	      1u);
  init_symbol(&symbols[4u],
	      "CAN_FIRE_RL_tb_randomA_every_1",
	      SYM_DEF,
	      &DEF_CAN_FIRE_RL_tb_randomA_every_1,
	      1u);
  init_symbol(&symbols[5u],
	      "CAN_FIRE_RL_tb_randomB_every",
	      SYM_DEF,
	      &DEF_CAN_FIRE_RL_tb_randomB_every,
	      1u);
  init_symbol(&symbols[6u],
	      "CAN_FIRE_RL_tb_randomB_every_1",
	      SYM_DEF,
	      &DEF_CAN_FIRE_RL_tb_randomB_every_1,
	      1u);
  init_symbol(&symbols[7u], "CAN_FIRE_RL_tb_read", SYM_DEF, &DEF_CAN_FIRE_RL_tb_read, 1u);
  init_symbol(&symbols[8u], "mod_a", SYM_MODULE, &INST_mod_a);
  init_symbol(&symbols[9u], "mod_b", SYM_MODULE, &INST_mod_b);
  init_symbol(&symbols[10u], "mod_carry", SYM_MODULE, &INST_mod_carry);
  init_symbol(&symbols[11u], "mod_i", SYM_MODULE, &INST_mod_i);
  init_symbol(&symbols[12u], "mod_res", SYM_MODULE, &INST_mod_res);
  init_symbol(&symbols[13u], "RL_mod_mulStep", SYM_RULE);
  init_symbol(&symbols[14u], "RL_tb_feed", SYM_RULE);
  init_symbol(&symbols[15u], "RL_tb_monitor_test", SYM_RULE);
  init_symbol(&symbols[16u], "RL_tb_randomA_every", SYM_RULE);
  init_symbol(&symbols[17u], "RL_tb_randomA_every_1", SYM_RULE);
  init_symbol(&symbols[18u], "RL_tb_randomB_every", SYM_RULE);
  init_symbol(&symbols[19u], "RL_tb_randomB_every_1", SYM_RULE);
  init_symbol(&symbols[20u], "RL_tb_read", SYM_RULE);
  init_symbol(&symbols[21u], "tb_cycle", SYM_MODULE, &INST_tb_cycle);
  init_symbol(&symbols[22u], "tb_feed_count", SYM_MODULE, &INST_tb_feed_count);
  init_symbol(&symbols[23u], "tb_operands_fifo", SYM_MODULE, &INST_tb_operands_fifo);
  init_symbol(&symbols[24u], "tb_randomA_ignore", SYM_MODULE, &INST_tb_randomA_ignore);
  init_symbol(&symbols[25u], "tb_randomA_initialized", SYM_MODULE, &INST_tb_randomA_initialized);
  init_symbol(&symbols[26u], "tb_randomA_zaz", SYM_MODULE, &INST_tb_randomA_zaz);
  init_symbol(&symbols[27u], "tb_randomB_ignore", SYM_MODULE, &INST_tb_randomB_ignore);
  init_symbol(&symbols[28u], "tb_randomB_initialized", SYM_MODULE, &INST_tb_randomB_initialized);
  init_symbol(&symbols[29u], "tb_randomB_zaz", SYM_MODULE, &INST_tb_randomB_zaz);
  init_symbol(&symbols[30u], "tb_read_count", SYM_MODULE, &INST_tb_read_count);
  init_symbol(&symbols[31u], "v__h1350", SYM_DEF, &DEF_v__h1350, 8u);
  init_symbol(&symbols[32u], "v__h961", SYM_DEF, &DEF_v__h961, 8u);
  init_symbol(&symbols[33u], "WILL_FIRE_RL_mod_mulStep", SYM_DEF, &DEF_WILL_FIRE_RL_mod_mulStep, 1u);
  init_symbol(&symbols[34u], "WILL_FIRE_RL_tb_feed", SYM_DEF, &DEF_WILL_FIRE_RL_tb_feed, 1u);
  init_symbol(&symbols[35u],
	      "WILL_FIRE_RL_tb_monitor_test",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_tb_monitor_test,
	      1u);
  init_symbol(&symbols[36u],
	      "WILL_FIRE_RL_tb_randomA_every",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_tb_randomA_every,
	      1u);
  init_symbol(&symbols[37u],
	      "WILL_FIRE_RL_tb_randomA_every_1",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_tb_randomA_every_1,
	      1u);
  init_symbol(&symbols[38u],
	      "WILL_FIRE_RL_tb_randomB_every",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_tb_randomB_every,
	      1u);
  init_symbol(&symbols[39u],
	      "WILL_FIRE_RL_tb_randomB_every_1",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_tb_randomB_every_1,
	      1u);
  init_symbol(&symbols[40u], "WILL_FIRE_RL_tb_read", SYM_DEF, &DEF_WILL_FIRE_RL_tb_read, 1u);
  init_symbol(&symbols[41u], "x__h1721", SYM_DEF, &DEF_x__h1721, 32u);
  init_symbol(&symbols[42u], "x__h254", SYM_DEF, &DEF_x__h254, 4u);
  init_symbol(&symbols[43u], "x__h3080", SYM_DEF, &DEF_x__h3080, 32u);
  init_symbol(&symbols[44u], "x_wget__h1213", SYM_DEF, &DEF_x_wget__h1213, 8u);
  init_symbol(&symbols[45u], "x_wget__h823", SYM_DEF, &DEF_x_wget__h823, 8u);
}


/* Rule actions */

void MOD_mkTbEx5::RL_mod_mulStep()
{
  tUInt8 DEF_x__h268;
  tUInt8 DEF_x__h399;
  tUInt8 DEF_x__h320;
  tUInt8 DEF_mod_b_BIT_0___h343;
  tUInt8 DEF_mod_b_BITS_7_TO_1___h406;
  tUInt8 DEF_mod_res_BITS_7_TO_1___h369;
  tUInt32 DEF_sum__h258;
  tUInt8 DEF_x__h383;
  tUInt8 DEF__read__h58;
  tUInt8 DEF_mod_b___d6;
  DEF_x__h317 = INST_mod_carry.METH_read();
  DEF__read__h124 = INST_mod_res.METH_read();
  DEF_mod_b___d6 = INST_mod_b.METH_read();
  DEF__read__h58 = INST_mod_a.METH_read();
  DEF_x__h254 = INST_mod_i.METH_read();
  DEF_mod_res_BITS_7_TO_1___h369 = (tUInt8)(DEF__read__h124 >> 1u);
  DEF_mod_b_BITS_7_TO_1___h406 = (tUInt8)(DEF_mod_b___d6 >> 1u);
  DEF_mod_b_BIT_0___h343 = (tUInt8)((tUInt8)1u & DEF_mod_b___d6);
  DEF_x__h320 = DEF_mod_b_BIT_0___h343 ? DEF__read__h58 : (tUInt8)0u;
  DEF_sum__h258 = 511u & ((511u & ((((tUInt32)((tUInt8)0u)) << 8u) | (tUInt32)(DEF_x__h317))) + (511u & ((((tUInt32)((tUInt8)0u)) << 8u) | (tUInt32)(DEF_x__h320))));
  DEF_x__h383 = (tUInt8)(DEF_sum__h258 >> 1u);
  DEF_x__h244 = (tUInt8)15u & (DEF_x__h254 + (tUInt8)1u);
  DEF_x__h399 = (tUInt8)255u & DEF_mod_b_BITS_7_TO_1___h406;
  DEF_x__h268 = (tUInt8)255u & ((((tUInt8)((tUInt8)1u & DEF_sum__h258)) << 7u) | DEF_mod_res_BITS_7_TO_1___h369);
  INST_mod_i.METH_write(DEF_x__h244);
  INST_mod_res.METH_write(DEF_x__h268);
  INST_mod_carry.METH_write(DEF_x__h383);
  INST_mod_b.METH_write(DEF_x__h399);
}

void MOD_mkTbEx5::RL_tb_randomA_every()
{
  tUInt8 DEF_new_value__h922;
  if (!(PORT_RST_N == (tUInt8)0u))
    DEF_v__h880 = rand32();
  DEF_new_value__h922 = (tUInt8)((tUInt8)255u & DEF_v__h880);
  INST_tb_randomA_zaz.METH_wset(DEF_new_value__h922);
}

void MOD_mkTbEx5::RL_tb_randomA_every_1()
{
  DEF_x_wget__h823 = INST_tb_randomA_zaz.METH_wget();
  DEF_v__h961 = INST_tb_randomA_zaz.METH_whas() ? DEF_x_wget__h823 : (tUInt8)0u;
  INST_tb_randomA_ignore.METH_wset(DEF_v__h961);
}

void MOD_mkTbEx5::RL_tb_randomB_every()
{
  tUInt8 DEF_new_value__h1312;
  if (!(PORT_RST_N == (tUInt8)0u))
    DEF_v__h1270 = rand32();
  DEF_new_value__h1312 = (tUInt8)((tUInt8)255u & DEF_v__h1270);
  INST_tb_randomB_zaz.METH_wset(DEF_new_value__h1312);
}

void MOD_mkTbEx5::RL_tb_randomB_every_1()
{
  DEF_x_wget__h1213 = INST_tb_randomB_zaz.METH_wget();
  DEF_v__h1350 = INST_tb_randomB_zaz.METH_whas() ? DEF_x_wget__h1213 : (tUInt8)0u;
  INST_tb_randomB_ignore.METH_wset(DEF_v__h1350);
}

void MOD_mkTbEx5::RL_tb_feed()
{
  tUInt32 DEF_IF_tb_randomA_zaz_whas__3_THEN_tb_randomA_zaz__ETC___d49;
  tUInt32 DEF_x__h1702;
  tUInt8 DEF_NOT_IF_tb_randomA_zaz_whas__3_THEN_tb_randomA__ETC___d48;
  DEF_x__h1721 = INST_tb_feed_count.METH_read();
  DEF_x_wget__h1213 = INST_tb_randomB_zaz.METH_wget();
  DEF_x_wget__h823 = INST_tb_randomA_zaz.METH_wget();
  DEF_v__h1350 = INST_tb_randomB_zaz.METH_whas() ? DEF_x_wget__h1213 : (tUInt8)0u;
  DEF_v__h961 = INST_tb_randomA_zaz.METH_whas() ? DEF_x_wget__h823 : (tUInt8)0u;
  DEF_IF_tb_randomA_zaz_whas__3_THEN_tb_randomA_zaz__ETC___d33 = DEF_v__h961 == (tUInt8)128u;
  DEF_IF_tb_randomB_zaz_whas__0_THEN_tb_randomB_zaz__ETC___d34 = DEF_v__h1350 == (tUInt8)128u;
  DEF_NOT_IF_tb_randomA_zaz_whas__3_THEN_tb_randomA__ETC___d48 = !DEF_IF_tb_randomA_zaz_whas__3_THEN_tb_randomA_zaz__ETC___d33 && !DEF_IF_tb_randomB_zaz_whas__0_THEN_tb_randomB_zaz__ETC___d34;
  DEF_x__h1702 = DEF_x__h1721 + 1u;
  DEF_IF_tb_randomA_zaz_whas__3_THEN_tb_randomA_zaz__ETC___d49 = 65535u & ((((tUInt32)(DEF_v__h961)) << 8u) | (tUInt32)(DEF_v__h1350));
  if (DEF_NOT_IF_tb_randomA_zaz_whas__3_THEN_tb_randomA__ETC___d48)
    INST_tb_operands_fifo.METH_enq(DEF_IF_tb_randomA_zaz_whas__3_THEN_tb_randomA_zaz__ETC___d49);
  if (DEF_NOT_IF_tb_randomA_zaz_whas__3_THEN_tb_randomA__ETC___d48)
    INST_mod_a.METH_write(DEF_v__h961);
  if (DEF_NOT_IF_tb_randomA_zaz_whas__3_THEN_tb_randomA__ETC___d48)
    INST_mod_b.METH_write(DEF_v__h1350);
  if (DEF_NOT_IF_tb_randomA_zaz_whas__3_THEN_tb_randomA__ETC___d48)
    INST_mod_i.METH_write((tUInt8)0u);
  if (DEF_NOT_IF_tb_randomA_zaz_whas__3_THEN_tb_randomA__ETC___d48)
    INST_mod_carry.METH_write((tUInt8)0u);
  if (DEF_NOT_IF_tb_randomA_zaz_whas__3_THEN_tb_randomA__ETC___d48)
    INST_mod_res.METH_write((tUInt8)0u);
  if (DEF_NOT_IF_tb_randomA_zaz_whas__3_THEN_tb_randomA__ETC___d48)
    INST_tb_feed_count.METH_write(DEF_x__h1702);
}

void MOD_mkTbEx5::RL_tb_read()
{
  tUInt32 DEF_sum__h1909;
  tUInt32 DEF_x__h2953;
  tUInt8 DEF_NOT_mod_carry_CONCAT_mod_res_3_8_EQ_0_CONCAT_0_ETC___d117;
  tUInt32 DEF__0_CONCAT_tb_operands_fifo_first__9_BITS_15_TO_8_1___d62;
  tUInt32 DEF_sum__h1993;
  tUInt8 DEF_x__h1992;
  tUInt32 DEF_sum__h1981;
  tUInt8 DEF_x__h1980;
  tUInt32 DEF_sum__h1969;
  tUInt8 DEF_x__h1968;
  tUInt32 DEF_sum__h1957;
  tUInt8 DEF_x__h1956;
  tUInt32 DEF_sum__h1945;
  tUInt8 DEF_x__h1944;
  tUInt32 DEF_sum__h1933;
  tUInt8 DEF_x__h1932;
  tUInt32 DEF_sum__h1921;
  tUInt8 DEF_x__h1920;
  tUInt32 DEF_tb_operands_fifo_first____d59;
  tUInt8 DEF_a__h1741;
  tUInt8 DEF_signed_tb_operands_fifo_first__9_BITS_15_TO_8_1___d113;
  tUInt8 DEF_b__h1742;
  tUInt8 DEF_signed_tb_operands_fifo_first__9_BITS_7_TO_0_14___d115;
  tUInt32 DEF_v__h1772;
  tUInt32 DEF_signed_mod_carry_CONCAT_mod_res_3_8___d116;
  tUInt32 DEF_expected__h1804;
  tUInt32 DEF_signed_0_CONCAT_0_CONCAT_0_CONCAT_0_CONCAT_0__ETC___d118;
  tUInt8 DEF_mod_carry_CONCAT_mod_res_3_8_EQ_0_CONCAT_0_CON_ETC___d112;
  DEF_x__h3080 = INST_tb_read_count.METH_read();
  DEF_tb_operands_fifo_first____d59 = INST_tb_operands_fifo.METH_first();
  DEF_b__h1742 = (tUInt8)((tUInt8)255u & DEF_tb_operands_fifo_first____d59);
  DEF_signed_tb_operands_fifo_first__9_BITS_7_TO_0_14___d115 = DEF_b__h1742;
  DEF_a__h1741 = (tUInt8)(DEF_tb_operands_fifo_first____d59 >> 8u);
  DEF_signed_tb_operands_fifo_first__9_BITS_15_TO_8_1___d113 = DEF_a__h1741;
  DEF_x__h317 = INST_mod_carry.METH_read();
  DEF__read__h124 = INST_mod_res.METH_read();
  DEF_v__h1772 = 65535u & ((((tUInt32)(DEF_x__h317)) << 8u) | (tUInt32)(DEF__read__h124));
  DEF_signed_mod_carry_CONCAT_mod_res_3_8___d116 = DEF_v__h1772;
  DEF_x__h254 = INST_mod_i.METH_read();
  DEF__0_CONCAT_tb_operands_fifo_first__9_BITS_15_TO_8_1___d62 = 511u & ((((tUInt32)((tUInt8)0u)) << 8u) | (tUInt32)(DEF_a__h1741));
  DEF_sum__h1993 = (tUInt8)((tUInt8)1u & DEF_tb_operands_fifo_first____d59) ? DEF__0_CONCAT_tb_operands_fifo_first__9_BITS_15_TO_8_1___d62 : 0u;
  DEF_x__h1992 = (tUInt8)(DEF_sum__h1993 >> 1u);
  DEF_sum__h1981 = 511u & ((511u & ((((tUInt32)((tUInt8)0u)) << 8u) | (tUInt32)(DEF_x__h1992))) + ((tUInt8)((tUInt8)1u & (DEF_tb_operands_fifo_first____d59 >> 1u)) ? DEF__0_CONCAT_tb_operands_fifo_first__9_BITS_15_TO_8_1___d62 : 0u));
  DEF_x__h1980 = (tUInt8)(DEF_sum__h1981 >> 1u);
  DEF_sum__h1969 = 511u & ((511u & ((((tUInt32)((tUInt8)0u)) << 8u) | (tUInt32)(DEF_x__h1980))) + ((tUInt8)((tUInt8)1u & (DEF_tb_operands_fifo_first____d59 >> 2u)) ? DEF__0_CONCAT_tb_operands_fifo_first__9_BITS_15_TO_8_1___d62 : 0u));
  DEF_x__h1968 = (tUInt8)(DEF_sum__h1969 >> 1u);
  DEF_sum__h1957 = 511u & ((511u & ((((tUInt32)((tUInt8)0u)) << 8u) | (tUInt32)(DEF_x__h1968))) + ((tUInt8)((tUInt8)1u & (DEF_tb_operands_fifo_first____d59 >> 3u)) ? DEF__0_CONCAT_tb_operands_fifo_first__9_BITS_15_TO_8_1___d62 : 0u));
  DEF_x__h1956 = (tUInt8)(DEF_sum__h1957 >> 1u);
  DEF_sum__h1945 = 511u & ((511u & ((((tUInt32)((tUInt8)0u)) << 8u) | (tUInt32)(DEF_x__h1956))) + ((tUInt8)((tUInt8)1u & (DEF_tb_operands_fifo_first____d59 >> 4u)) ? DEF__0_CONCAT_tb_operands_fifo_first__9_BITS_15_TO_8_1___d62 : 0u));
  DEF_x__h1944 = (tUInt8)(DEF_sum__h1945 >> 1u);
  DEF_sum__h1933 = 511u & ((511u & ((((tUInt32)((tUInt8)0u)) << 8u) | (tUInt32)(DEF_x__h1944))) + ((tUInt8)((tUInt8)1u & (DEF_tb_operands_fifo_first____d59 >> 5u)) ? DEF__0_CONCAT_tb_operands_fifo_first__9_BITS_15_TO_8_1___d62 : 0u));
  DEF_x__h1932 = (tUInt8)(DEF_sum__h1933 >> 1u);
  DEF_sum__h1921 = 511u & ((511u & ((((tUInt32)((tUInt8)0u)) << 8u) | (tUInt32)(DEF_x__h1932))) + ((tUInt8)((tUInt8)1u & (DEF_tb_operands_fifo_first____d59 >> 6u)) ? DEF__0_CONCAT_tb_operands_fifo_first__9_BITS_15_TO_8_1___d62 : 0u));
  DEF_x__h1920 = (tUInt8)(DEF_sum__h1921 >> 1u);
  DEF_x__h2953 = DEF_x__h3080 + 1u;
  DEF_sum__h1909 = 511u & ((511u & ((((tUInt32)((tUInt8)0u)) << 8u) | (tUInt32)(DEF_x__h1920))) + ((tUInt8)((tUInt8)1u & (DEF_tb_operands_fifo_first____d59 >> 7u)) ? DEF__0_CONCAT_tb_operands_fifo_first__9_BITS_15_TO_8_1___d62 : 0u));
  DEF_expected__h1804 = 65535u & ((((((((DEF_sum__h1909 << 7u) | (((tUInt32)((tUInt8)((tUInt8)1u & DEF_sum__h1921))) << 6u)) | (((tUInt32)((tUInt8)((tUInt8)1u & DEF_sum__h1933))) << 5u)) | (((tUInt32)((tUInt8)((tUInt8)1u & DEF_sum__h1945))) << 4u)) | (((tUInt32)((tUInt8)((tUInt8)1u & DEF_sum__h1957))) << 3u)) | (((tUInt32)((tUInt8)((tUInt8)1u & DEF_sum__h1969))) << 2u)) | (((tUInt32)((tUInt8)((tUInt8)1u & DEF_sum__h1981))) << 1u)) | (tUInt32)((tUInt8)((tUInt8)1u & ((tUInt8)((tUInt8)1u & DEF_sum__h1993) ? (tUInt8)1u : (tUInt8)0u))));
  DEF_mod_carry_CONCAT_mod_res_3_8_EQ_0_CONCAT_0_CON_ETC___d112 = DEF_v__h1772 == DEF_expected__h1804;
  DEF_signed_0_CONCAT_0_CONCAT_0_CONCAT_0_CONCAT_0__ETC___d118 = DEF_expected__h1804;
  DEF_NOT_mod_carry_CONCAT_mod_res_3_8_EQ_0_CONCAT_0_ETC___d117 = !DEF_mod_carry_CONCAT_mod_res_3_8_EQ_0_CONCAT_0_CON_ETC___d112;
  DEF_x__h244 = (tUInt8)15u & (DEF_x__h254 + (tUInt8)1u);
  INST_tb_operands_fifo.METH_deq();
  INST_mod_i.METH_write(DEF_x__h244);
  if (!(PORT_RST_N == (tUInt8)0u))
  {
    if (DEF_mod_carry_CONCAT_mod_res_3_8_EQ_0_CONCAT_0_CON_ETC___d112)
      dollar_display(sim_hdl, this, "s,32", &__str_literal_1, DEF_x__h3080);
    if (DEF_mod_carry_CONCAT_mod_res_3_8_EQ_0_CONCAT_0_CON_ETC___d112)
      dollar_display(sim_hdl,
		     this,
		     "s,-8,-8,-16",
		     &__str_literal_2,
		     DEF_signed_tb_operands_fifo_first__9_BITS_15_TO_8_1___d113,
		     DEF_signed_tb_operands_fifo_first__9_BITS_7_TO_0_14___d115,
		     DEF_signed_mod_carry_CONCAT_mod_res_3_8___d116);
    if (DEF_mod_carry_CONCAT_mod_res_3_8_EQ_0_CONCAT_0_CON_ETC___d112)
      dollar_display(sim_hdl,
		     this,
		     "s,8,8,16",
		     &__str_literal_3,
		     DEF_a__h1741,
		     DEF_b__h1742,
		     DEF_v__h1772);
    if (DEF_NOT_mod_carry_CONCAT_mod_res_3_8_EQ_0_CONCAT_0_ETC___d117)
      dollar_display(sim_hdl, this, "s,32", &__str_literal_4, DEF_x__h3080);
    if (DEF_NOT_mod_carry_CONCAT_mod_res_3_8_EQ_0_CONCAT_0_ETC___d117)
      dollar_display(sim_hdl,
		     this,
		     "s,-8,-8,-16,-16",
		     &__str_literal_5,
		     DEF_signed_tb_operands_fifo_first__9_BITS_15_TO_8_1___d113,
		     DEF_signed_tb_operands_fifo_first__9_BITS_7_TO_0_14___d115,
		     DEF_signed_mod_carry_CONCAT_mod_res_3_8___d116,
		     DEF_signed_0_CONCAT_0_CONCAT_0_CONCAT_0_CONCAT_0__ETC___d118);
    if (DEF_NOT_mod_carry_CONCAT_mod_res_3_8_EQ_0_CONCAT_0_ETC___d117)
      dollar_display(sim_hdl,
		     this,
		     "s,8,8,16,16",
		     &__str_literal_6,
		     DEF_a__h1741,
		     DEF_b__h1742,
		     DEF_v__h1772,
		     DEF_expected__h1804);
    if (DEF_NOT_mod_carry_CONCAT_mod_res_3_8_EQ_0_CONCAT_0_ETC___d117)
      dollar_finish(sim_hdl, "32", 1u);
  }
  INST_tb_read_count.METH_write(DEF_x__h2953);
}

void MOD_mkTbEx5::RL_tb_monitor_test()
{
  tUInt32 DEF_x__h3327;
  tUInt8 DEF_tb_cycle_20_EQ_0___d121;
  tUInt8 DEF_tb_cycle_20_EQ_16384___d122;
  tUInt32 DEF_x__h3331;
  DEF_x__h3080 = INST_tb_read_count.METH_read();
  DEF_x__h3331 = INST_tb_cycle.METH_read();
  DEF_tb_cycle_20_EQ_16384___d122 = DEF_x__h3331 == 16384u;
  DEF_tb_cycle_20_EQ_0___d121 = DEF_x__h3331 == 0u;
  DEF_tb_read_count_4_EQ_128___d55 = DEF_x__h3080 == 128u;
  DEF_x__h3327 = DEF_x__h3331 + 1u;
  if (DEF_tb_cycle_20_EQ_0___d121)
    INST_tb_randomA_initialized.METH_write((tUInt8)1u);
  if (DEF_tb_cycle_20_EQ_0___d121)
    INST_tb_randomB_initialized.METH_write((tUInt8)1u);
  if (!(PORT_RST_N == (tUInt8)0u))
  {
    if (DEF_tb_read_count_4_EQ_128___d55)
      dollar_display(sim_hdl, this, "s,32,32", &__str_literal_7, DEF_x__h3080, DEF_x__h3331);
    if (DEF_tb_read_count_4_EQ_128___d55)
      dollar_finish(sim_hdl, "32", 1u);
    if (DEF_tb_cycle_20_EQ_16384___d122)
      dollar_display(sim_hdl, this, "s", &__str_literal_8);
    if (DEF_tb_cycle_20_EQ_16384___d122)
      dollar_finish(sim_hdl, "32", 1u);
  }
  INST_tb_cycle.METH_write(DEF_x__h3327);
}


/* Methods */


/* Reset routines */

void MOD_mkTbEx5::reset_RST_N(tUInt8 ARG_rst_in)
{
  PORT_RST_N = ARG_rst_in;
  INST_tb_read_count.reset_RST(ARG_rst_in);
  INST_tb_randomB_initialized.reset_RST(ARG_rst_in);
  INST_tb_randomA_initialized.reset_RST(ARG_rst_in);
  INST_tb_operands_fifo.reset_RST(ARG_rst_in);
  INST_tb_feed_count.reset_RST(ARG_rst_in);
  INST_tb_cycle.reset_RST(ARG_rst_in);
  INST_mod_res.reset_RST(ARG_rst_in);
  INST_mod_i.reset_RST(ARG_rst_in);
  INST_mod_carry.reset_RST(ARG_rst_in);
  INST_mod_b.reset_RST(ARG_rst_in);
  INST_mod_a.reset_RST(ARG_rst_in);
}


/* Static handles to reset routines */


/* Functions for the parent module to register its reset fns */


/* Functions to set the elaborated clock id */

void MOD_mkTbEx5::set_clk_0(char const *s)
{
  __clk_handle_0 = bk_get_or_define_clock(sim_hdl, s);
}


/* State dumping routine */
void MOD_mkTbEx5::dump_state(unsigned int indent)
{
  printf("%*s%s:\n", indent, "", inst_name);
  INST_mod_a.dump_state(indent + 2u);
  INST_mod_b.dump_state(indent + 2u);
  INST_mod_carry.dump_state(indent + 2u);
  INST_mod_i.dump_state(indent + 2u);
  INST_mod_res.dump_state(indent + 2u);
  INST_tb_cycle.dump_state(indent + 2u);
  INST_tb_feed_count.dump_state(indent + 2u);
  INST_tb_operands_fifo.dump_state(indent + 2u);
  INST_tb_randomA_ignore.dump_state(indent + 2u);
  INST_tb_randomA_initialized.dump_state(indent + 2u);
  INST_tb_randomA_zaz.dump_state(indent + 2u);
  INST_tb_randomB_ignore.dump_state(indent + 2u);
  INST_tb_randomB_initialized.dump_state(indent + 2u);
  INST_tb_randomB_zaz.dump_state(indent + 2u);
  INST_tb_read_count.dump_state(indent + 2u);
}


/* VCD dumping routines */

unsigned int MOD_mkTbEx5::dump_VCD_defs(unsigned int levels)
{
  vcd_write_scope_start(sim_hdl, inst_name);
  vcd_num = vcd_reserve_ids(sim_hdl, 47u);
  unsigned int num = vcd_num;
  for (unsigned int clk = 0u; clk < bk_num_clocks(sim_hdl); ++clk)
    vcd_add_clock_def(sim_hdl, this, bk_clock_name(sim_hdl, clk), bk_clock_vcd_num(sim_hdl, clk));
  vcd_write_def(sim_hdl, bk_clock_vcd_num(sim_hdl, __clk_handle_0), "CLK", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_mod_mulStep", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_tb_feed", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_tb_monitor_test", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_tb_randomA_every", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_tb_randomA_every_1", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_tb_randomB_every", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_tb_randomB_every_1", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_tb_read", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "IF_tb_randomA_zaz_whas__3_THEN_tb_randomA_zaz__ETC___d33", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "IF_tb_randomB_zaz_whas__0_THEN_tb_randomB_zaz__ETC___d34", 1u);
  vcd_write_def(sim_hdl, num++, "RST_N", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_mod_mulStep", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_tb_feed", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_tb_monitor_test", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_tb_randomA_every", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_tb_randomA_every_1", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_tb_randomB_every", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_tb_randomB_every_1", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_tb_read", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "_read__h124", 8u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "tb_read_count_4_EQ_128___d55", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "v__h1270", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "v__h1350", 8u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "v__h880", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "v__h961", 8u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "x__h1721", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "x__h244", 4u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "x__h254", 4u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "x__h3080", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "x__h317", 8u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "x_wget__h1213", 8u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "x_wget__h823", 8u);
  num = INST_mod_a.dump_VCD_defs(num);
  num = INST_mod_b.dump_VCD_defs(num);
  num = INST_mod_carry.dump_VCD_defs(num);
  num = INST_mod_i.dump_VCD_defs(num);
  num = INST_mod_res.dump_VCD_defs(num);
  num = INST_tb_cycle.dump_VCD_defs(num);
  num = INST_tb_feed_count.dump_VCD_defs(num);
  num = INST_tb_operands_fifo.dump_VCD_defs(num);
  num = INST_tb_randomA_ignore.dump_VCD_defs(num);
  num = INST_tb_randomA_initialized.dump_VCD_defs(num);
  num = INST_tb_randomA_zaz.dump_VCD_defs(num);
  num = INST_tb_randomB_ignore.dump_VCD_defs(num);
  num = INST_tb_randomB_initialized.dump_VCD_defs(num);
  num = INST_tb_randomB_zaz.dump_VCD_defs(num);
  num = INST_tb_read_count.dump_VCD_defs(num);
  vcd_write_scope_end(sim_hdl);
  return num;
}

void MOD_mkTbEx5::dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkTbEx5 &backing)
{
  vcd_defs(dt, backing);
  vcd_prims(dt, backing);
}

void MOD_mkTbEx5::vcd_defs(tVCDDumpType dt, MOD_mkTbEx5 &backing)
{
  unsigned int num = vcd_num;
  if (dt == VCD_DUMP_XS)
  {
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 8u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 8u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 8u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 4u);
    vcd_write_x(sim_hdl, num++, 4u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 8u);
    vcd_write_x(sim_hdl, num++, 8u);
    vcd_write_x(sim_hdl, num++, 8u);
  }
  else
    if (dt == VCD_DUMP_CHANGES)
    {
      if ((backing.DEF_CAN_FIRE_RL_mod_mulStep) != DEF_CAN_FIRE_RL_mod_mulStep)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_mod_mulStep, 1u);
	backing.DEF_CAN_FIRE_RL_mod_mulStep = DEF_CAN_FIRE_RL_mod_mulStep;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_tb_feed) != DEF_CAN_FIRE_RL_tb_feed)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_tb_feed, 1u);
	backing.DEF_CAN_FIRE_RL_tb_feed = DEF_CAN_FIRE_RL_tb_feed;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_tb_monitor_test) != DEF_CAN_FIRE_RL_tb_monitor_test)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_tb_monitor_test, 1u);
	backing.DEF_CAN_FIRE_RL_tb_monitor_test = DEF_CAN_FIRE_RL_tb_monitor_test;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_tb_randomA_every) != DEF_CAN_FIRE_RL_tb_randomA_every)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_tb_randomA_every, 1u);
	backing.DEF_CAN_FIRE_RL_tb_randomA_every = DEF_CAN_FIRE_RL_tb_randomA_every;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_tb_randomA_every_1) != DEF_CAN_FIRE_RL_tb_randomA_every_1)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_tb_randomA_every_1, 1u);
	backing.DEF_CAN_FIRE_RL_tb_randomA_every_1 = DEF_CAN_FIRE_RL_tb_randomA_every_1;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_tb_randomB_every) != DEF_CAN_FIRE_RL_tb_randomB_every)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_tb_randomB_every, 1u);
	backing.DEF_CAN_FIRE_RL_tb_randomB_every = DEF_CAN_FIRE_RL_tb_randomB_every;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_tb_randomB_every_1) != DEF_CAN_FIRE_RL_tb_randomB_every_1)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_tb_randomB_every_1, 1u);
	backing.DEF_CAN_FIRE_RL_tb_randomB_every_1 = DEF_CAN_FIRE_RL_tb_randomB_every_1;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_tb_read) != DEF_CAN_FIRE_RL_tb_read)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_tb_read, 1u);
	backing.DEF_CAN_FIRE_RL_tb_read = DEF_CAN_FIRE_RL_tb_read;
      }
      ++num;
      if ((backing.DEF_IF_tb_randomA_zaz_whas__3_THEN_tb_randomA_zaz__ETC___d33) != DEF_IF_tb_randomA_zaz_whas__3_THEN_tb_randomA_zaz__ETC___d33)
      {
	vcd_write_val(sim_hdl, num, DEF_IF_tb_randomA_zaz_whas__3_THEN_tb_randomA_zaz__ETC___d33, 1u);
	backing.DEF_IF_tb_randomA_zaz_whas__3_THEN_tb_randomA_zaz__ETC___d33 = DEF_IF_tb_randomA_zaz_whas__3_THEN_tb_randomA_zaz__ETC___d33;
      }
      ++num;
      if ((backing.DEF_IF_tb_randomB_zaz_whas__0_THEN_tb_randomB_zaz__ETC___d34) != DEF_IF_tb_randomB_zaz_whas__0_THEN_tb_randomB_zaz__ETC___d34)
      {
	vcd_write_val(sim_hdl, num, DEF_IF_tb_randomB_zaz_whas__0_THEN_tb_randomB_zaz__ETC___d34, 1u);
	backing.DEF_IF_tb_randomB_zaz_whas__0_THEN_tb_randomB_zaz__ETC___d34 = DEF_IF_tb_randomB_zaz_whas__0_THEN_tb_randomB_zaz__ETC___d34;
      }
      ++num;
      if ((backing.PORT_RST_N) != PORT_RST_N)
      {
	vcd_write_val(sim_hdl, num, PORT_RST_N, 1u);
	backing.PORT_RST_N = PORT_RST_N;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_mod_mulStep) != DEF_WILL_FIRE_RL_mod_mulStep)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_mod_mulStep, 1u);
	backing.DEF_WILL_FIRE_RL_mod_mulStep = DEF_WILL_FIRE_RL_mod_mulStep;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_tb_feed) != DEF_WILL_FIRE_RL_tb_feed)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_tb_feed, 1u);
	backing.DEF_WILL_FIRE_RL_tb_feed = DEF_WILL_FIRE_RL_tb_feed;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_tb_monitor_test) != DEF_WILL_FIRE_RL_tb_monitor_test)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_tb_monitor_test, 1u);
	backing.DEF_WILL_FIRE_RL_tb_monitor_test = DEF_WILL_FIRE_RL_tb_monitor_test;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_tb_randomA_every) != DEF_WILL_FIRE_RL_tb_randomA_every)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_tb_randomA_every, 1u);
	backing.DEF_WILL_FIRE_RL_tb_randomA_every = DEF_WILL_FIRE_RL_tb_randomA_every;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_tb_randomA_every_1) != DEF_WILL_FIRE_RL_tb_randomA_every_1)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_tb_randomA_every_1, 1u);
	backing.DEF_WILL_FIRE_RL_tb_randomA_every_1 = DEF_WILL_FIRE_RL_tb_randomA_every_1;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_tb_randomB_every) != DEF_WILL_FIRE_RL_tb_randomB_every)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_tb_randomB_every, 1u);
	backing.DEF_WILL_FIRE_RL_tb_randomB_every = DEF_WILL_FIRE_RL_tb_randomB_every;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_tb_randomB_every_1) != DEF_WILL_FIRE_RL_tb_randomB_every_1)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_tb_randomB_every_1, 1u);
	backing.DEF_WILL_FIRE_RL_tb_randomB_every_1 = DEF_WILL_FIRE_RL_tb_randomB_every_1;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_tb_read) != DEF_WILL_FIRE_RL_tb_read)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_tb_read, 1u);
	backing.DEF_WILL_FIRE_RL_tb_read = DEF_WILL_FIRE_RL_tb_read;
      }
      ++num;
      if ((backing.DEF__read__h124) != DEF__read__h124)
      {
	vcd_write_val(sim_hdl, num, DEF__read__h124, 8u);
	backing.DEF__read__h124 = DEF__read__h124;
      }
      ++num;
      if ((backing.DEF_tb_read_count_4_EQ_128___d55) != DEF_tb_read_count_4_EQ_128___d55)
      {
	vcd_write_val(sim_hdl, num, DEF_tb_read_count_4_EQ_128___d55, 1u);
	backing.DEF_tb_read_count_4_EQ_128___d55 = DEF_tb_read_count_4_EQ_128___d55;
      }
      ++num;
      if ((backing.DEF_v__h1270) != DEF_v__h1270)
      {
	vcd_write_val(sim_hdl, num, DEF_v__h1270, 32u);
	backing.DEF_v__h1270 = DEF_v__h1270;
      }
      ++num;
      if ((backing.DEF_v__h1350) != DEF_v__h1350)
      {
	vcd_write_val(sim_hdl, num, DEF_v__h1350, 8u);
	backing.DEF_v__h1350 = DEF_v__h1350;
      }
      ++num;
      if ((backing.DEF_v__h880) != DEF_v__h880)
      {
	vcd_write_val(sim_hdl, num, DEF_v__h880, 32u);
	backing.DEF_v__h880 = DEF_v__h880;
      }
      ++num;
      if ((backing.DEF_v__h961) != DEF_v__h961)
      {
	vcd_write_val(sim_hdl, num, DEF_v__h961, 8u);
	backing.DEF_v__h961 = DEF_v__h961;
      }
      ++num;
      if ((backing.DEF_x__h1721) != DEF_x__h1721)
      {
	vcd_write_val(sim_hdl, num, DEF_x__h1721, 32u);
	backing.DEF_x__h1721 = DEF_x__h1721;
      }
      ++num;
      if ((backing.DEF_x__h244) != DEF_x__h244)
      {
	vcd_write_val(sim_hdl, num, DEF_x__h244, 4u);
	backing.DEF_x__h244 = DEF_x__h244;
      }
      ++num;
      if ((backing.DEF_x__h254) != DEF_x__h254)
      {
	vcd_write_val(sim_hdl, num, DEF_x__h254, 4u);
	backing.DEF_x__h254 = DEF_x__h254;
      }
      ++num;
      if ((backing.DEF_x__h3080) != DEF_x__h3080)
      {
	vcd_write_val(sim_hdl, num, DEF_x__h3080, 32u);
	backing.DEF_x__h3080 = DEF_x__h3080;
      }
      ++num;
      if ((backing.DEF_x__h317) != DEF_x__h317)
      {
	vcd_write_val(sim_hdl, num, DEF_x__h317, 8u);
	backing.DEF_x__h317 = DEF_x__h317;
      }
      ++num;
      if ((backing.DEF_x_wget__h1213) != DEF_x_wget__h1213)
      {
	vcd_write_val(sim_hdl, num, DEF_x_wget__h1213, 8u);
	backing.DEF_x_wget__h1213 = DEF_x_wget__h1213;
      }
      ++num;
      if ((backing.DEF_x_wget__h823) != DEF_x_wget__h823)
      {
	vcd_write_val(sim_hdl, num, DEF_x_wget__h823, 8u);
	backing.DEF_x_wget__h823 = DEF_x_wget__h823;
      }
      ++num;
    }
    else
    {
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_mod_mulStep, 1u);
      backing.DEF_CAN_FIRE_RL_mod_mulStep = DEF_CAN_FIRE_RL_mod_mulStep;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_tb_feed, 1u);
      backing.DEF_CAN_FIRE_RL_tb_feed = DEF_CAN_FIRE_RL_tb_feed;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_tb_monitor_test, 1u);
      backing.DEF_CAN_FIRE_RL_tb_monitor_test = DEF_CAN_FIRE_RL_tb_monitor_test;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_tb_randomA_every, 1u);
      backing.DEF_CAN_FIRE_RL_tb_randomA_every = DEF_CAN_FIRE_RL_tb_randomA_every;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_tb_randomA_every_1, 1u);
      backing.DEF_CAN_FIRE_RL_tb_randomA_every_1 = DEF_CAN_FIRE_RL_tb_randomA_every_1;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_tb_randomB_every, 1u);
      backing.DEF_CAN_FIRE_RL_tb_randomB_every = DEF_CAN_FIRE_RL_tb_randomB_every;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_tb_randomB_every_1, 1u);
      backing.DEF_CAN_FIRE_RL_tb_randomB_every_1 = DEF_CAN_FIRE_RL_tb_randomB_every_1;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_tb_read, 1u);
      backing.DEF_CAN_FIRE_RL_tb_read = DEF_CAN_FIRE_RL_tb_read;
      vcd_write_val(sim_hdl, num++, DEF_IF_tb_randomA_zaz_whas__3_THEN_tb_randomA_zaz__ETC___d33, 1u);
      backing.DEF_IF_tb_randomA_zaz_whas__3_THEN_tb_randomA_zaz__ETC___d33 = DEF_IF_tb_randomA_zaz_whas__3_THEN_tb_randomA_zaz__ETC___d33;
      vcd_write_val(sim_hdl, num++, DEF_IF_tb_randomB_zaz_whas__0_THEN_tb_randomB_zaz__ETC___d34, 1u);
      backing.DEF_IF_tb_randomB_zaz_whas__0_THEN_tb_randomB_zaz__ETC___d34 = DEF_IF_tb_randomB_zaz_whas__0_THEN_tb_randomB_zaz__ETC___d34;
      vcd_write_val(sim_hdl, num++, PORT_RST_N, 1u);
      backing.PORT_RST_N = PORT_RST_N;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_mod_mulStep, 1u);
      backing.DEF_WILL_FIRE_RL_mod_mulStep = DEF_WILL_FIRE_RL_mod_mulStep;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_tb_feed, 1u);
      backing.DEF_WILL_FIRE_RL_tb_feed = DEF_WILL_FIRE_RL_tb_feed;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_tb_monitor_test, 1u);
      backing.DEF_WILL_FIRE_RL_tb_monitor_test = DEF_WILL_FIRE_RL_tb_monitor_test;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_tb_randomA_every, 1u);
      backing.DEF_WILL_FIRE_RL_tb_randomA_every = DEF_WILL_FIRE_RL_tb_randomA_every;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_tb_randomA_every_1, 1u);
      backing.DEF_WILL_FIRE_RL_tb_randomA_every_1 = DEF_WILL_FIRE_RL_tb_randomA_every_1;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_tb_randomB_every, 1u);
      backing.DEF_WILL_FIRE_RL_tb_randomB_every = DEF_WILL_FIRE_RL_tb_randomB_every;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_tb_randomB_every_1, 1u);
      backing.DEF_WILL_FIRE_RL_tb_randomB_every_1 = DEF_WILL_FIRE_RL_tb_randomB_every_1;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_tb_read, 1u);
      backing.DEF_WILL_FIRE_RL_tb_read = DEF_WILL_FIRE_RL_tb_read;
      vcd_write_val(sim_hdl, num++, DEF__read__h124, 8u);
      backing.DEF__read__h124 = DEF__read__h124;
      vcd_write_val(sim_hdl, num++, DEF_tb_read_count_4_EQ_128___d55, 1u);
      backing.DEF_tb_read_count_4_EQ_128___d55 = DEF_tb_read_count_4_EQ_128___d55;
      vcd_write_val(sim_hdl, num++, DEF_v__h1270, 32u);
      backing.DEF_v__h1270 = DEF_v__h1270;
      vcd_write_val(sim_hdl, num++, DEF_v__h1350, 8u);
      backing.DEF_v__h1350 = DEF_v__h1350;
      vcd_write_val(sim_hdl, num++, DEF_v__h880, 32u);
      backing.DEF_v__h880 = DEF_v__h880;
      vcd_write_val(sim_hdl, num++, DEF_v__h961, 8u);
      backing.DEF_v__h961 = DEF_v__h961;
      vcd_write_val(sim_hdl, num++, DEF_x__h1721, 32u);
      backing.DEF_x__h1721 = DEF_x__h1721;
      vcd_write_val(sim_hdl, num++, DEF_x__h244, 4u);
      backing.DEF_x__h244 = DEF_x__h244;
      vcd_write_val(sim_hdl, num++, DEF_x__h254, 4u);
      backing.DEF_x__h254 = DEF_x__h254;
      vcd_write_val(sim_hdl, num++, DEF_x__h3080, 32u);
      backing.DEF_x__h3080 = DEF_x__h3080;
      vcd_write_val(sim_hdl, num++, DEF_x__h317, 8u);
      backing.DEF_x__h317 = DEF_x__h317;
      vcd_write_val(sim_hdl, num++, DEF_x_wget__h1213, 8u);
      backing.DEF_x_wget__h1213 = DEF_x_wget__h1213;
      vcd_write_val(sim_hdl, num++, DEF_x_wget__h823, 8u);
      backing.DEF_x_wget__h823 = DEF_x_wget__h823;
    }
}

void MOD_mkTbEx5::vcd_prims(tVCDDumpType dt, MOD_mkTbEx5 &backing)
{
  INST_mod_a.dump_VCD(dt, backing.INST_mod_a);
  INST_mod_b.dump_VCD(dt, backing.INST_mod_b);
  INST_mod_carry.dump_VCD(dt, backing.INST_mod_carry);
  INST_mod_i.dump_VCD(dt, backing.INST_mod_i);
  INST_mod_res.dump_VCD(dt, backing.INST_mod_res);
  INST_tb_cycle.dump_VCD(dt, backing.INST_tb_cycle);
  INST_tb_feed_count.dump_VCD(dt, backing.INST_tb_feed_count);
  INST_tb_operands_fifo.dump_VCD(dt, backing.INST_tb_operands_fifo);
  INST_tb_randomA_ignore.dump_VCD(dt, backing.INST_tb_randomA_ignore);
  INST_tb_randomA_initialized.dump_VCD(dt, backing.INST_tb_randomA_initialized);
  INST_tb_randomA_zaz.dump_VCD(dt, backing.INST_tb_randomA_zaz);
  INST_tb_randomB_ignore.dump_VCD(dt, backing.INST_tb_randomB_ignore);
  INST_tb_randomB_initialized.dump_VCD(dt, backing.INST_tb_randomB_initialized);
  INST_tb_randomB_zaz.dump_VCD(dt, backing.INST_tb_randomB_zaz);
  INST_tb_read_count.dump_VCD(dt, backing.INST_tb_read_count);
}
