/*
 * Generated by Bluespec Compiler (build 14ff62d)
 * 
 * On Sat Jul  1 22:03:18 CST 2023
 * 
 */
#include "bluesim_primitives.h"
#include "mkBfly4.h"


/* Constructor */
MOD_mkBfly4::MOD_mkBfly4(tSimStateHdl simHdl, char const *name, Module *parent)
  : Module(simHdl, name, parent), __clk_handle_0(BAD_CLOCK_HANDLE), PORT_RST_N((tUInt8)1u)
{
  symbol_count = 0u;
  init_symbols_0();
}


/* Symbol init fns */

void MOD_mkBfly4::init_symbols_0()
{
}


/* Rule actions */


/* Methods */

tUInt64 MOD_mkBfly4::METH_bfly4(tUInt64 ARG_bfly4_t, tUInt64 ARG_bfly4_x)
{
  tUInt8 DEF_x__h1820;
  tUInt8 DEF_x__h1869;
  tUInt8 DEF_y__h1629;
  tUInt8 DEF_x__h1628;
  tUInt8 DEF_y__h1677;
  tUInt8 DEF_x__h1676;
  tUInt8 DEF_y__h1766;
  tUInt8 DEF_x__h1765;
  tUInt8 DEF_y__h1506;
  tUInt8 DEF_x__h1505;
  tUInt8 DEF_y__h1520;
  tUInt8 DEF_x__h1519;
  tUInt8 DEF_y__h1504;
  tUInt8 DEF_x__h1503;
  tUInt8 DEF_y__h1597;
  tUInt8 DEF_x__h1596;
  tUInt8 DEF_y__h1697;
  tUInt8 DEF_x__h1696;
  tUInt8 DEF_x__h1784;
  tUInt8 DEF_x__h1735;
  tUInt32 DEF_bfly4_x_BITS_15_TO_8_MUL_bfly4_t_BITS_15_TO_8__ETC___d72;
  tUInt8 DEF_x__h1695;
  tUInt8 DEF_x__h1566;
  tUInt8 DEF_x__h1502;
  tUInt8 DEF_x__h239;
  tUInt32 DEF_bfly4_x_BITS_15_TO_8_MUL_bfly4_t_BITS_15_TO_8__ETC___d69;
  tUInt8 DEF_y__h1508;
  tUInt8 DEF_y__h1511;
  tUInt8 DEF_y__h1522;
  tUInt8 DEF_y__h1525;
  tUInt8 DEF_y__h1514;
  tUInt8 DEF_y__h1517;
  tUInt8 DEF_y__h1528;
  tUInt8 DEF_y__h1531;
  tUInt8 DEF_x__h1510;
  tUInt8 DEF_x__h1507;
  tUInt8 DEF_x__h1524;
  tUInt8 DEF_x__h1521;
  tUInt8 DEF_x__h1516;
  tUInt8 DEF_x__h1513;
  tUInt8 DEF_x__h1530;
  tUInt8 DEF_x__h1527;
  tUInt8 DEF_ii__h833;
  tUInt8 DEF_rr__h832;
  tUInt8 DEF_rr__h1140;
  tUInt8 DEF_ii__h1141;
  tUInt8 DEF_rr__h1286;
  tUInt8 DEF_ii__h1287;
  tUInt8 DEF_rr__h1400;
  tUInt8 DEF_ii__h1401;
  tUInt8 DEF_ri__h835;
  tUInt8 DEF_ir__h834;
  tUInt8 DEF_ri__h1143;
  tUInt8 DEF_ir__h1142;
  tUInt8 DEF_ri__h1289;
  tUInt8 DEF_ir__h1288;
  tUInt8 DEF_ri__h1403;
  tUInt8 DEF_ir__h1402;
  tUInt64 PORT_bfly4;
  DEF_x__h1527 = (tUInt8)(ARG_bfly4_x >> 56u);
  DEF_x__h1530 = (tUInt8)((tUInt8)255u & (ARG_bfly4_x >> 48u));
  DEF_x__h1513 = (tUInt8)((tUInt8)255u & (ARG_bfly4_x >> 40u));
  DEF_x__h1521 = (tUInt8)((tUInt8)255u & (ARG_bfly4_x >> 24u));
  DEF_x__h1516 = (tUInt8)((tUInt8)255u & (ARG_bfly4_x >> 32u));
  DEF_x__h1524 = (tUInt8)((tUInt8)255u & (ARG_bfly4_x >> 16u));
  DEF_x__h1507 = (tUInt8)((tUInt8)255u & (ARG_bfly4_x >> 8u));
  DEF_x__h1510 = (tUInt8)((tUInt8)255u & ARG_bfly4_x);
  DEF_y__h1531 = (tUInt8)(ARG_bfly4_t >> 56u);
  DEF_ir__h1402 = (tUInt8)((tUInt8)255u & (65535u & (((tUInt32)(DEF_x__h1530)) * ((tUInt32)(DEF_y__h1531)))));
  DEF_rr__h1400 = (tUInt8)((tUInt8)255u & (65535u & (((tUInt32)(DEF_x__h1527)) * ((tUInt32)(DEF_y__h1531)))));
  DEF_y__h1528 = (tUInt8)((tUInt8)255u & (ARG_bfly4_t >> 48u));
  DEF_ri__h1403 = (tUInt8)((tUInt8)255u & (65535u & (((tUInt32)(DEF_x__h1527)) * ((tUInt32)(DEF_y__h1528)))));
  DEF_ii__h1401 = (tUInt8)((tUInt8)255u & (65535u & (((tUInt32)(DEF_x__h1530)) * ((tUInt32)(DEF_y__h1528)))));
  DEF_y__h1517 = (tUInt8)((tUInt8)255u & (ARG_bfly4_t >> 40u));
  DEF_ir__h1142 = (tUInt8)((tUInt8)255u & (65535u & (((tUInt32)(DEF_x__h1516)) * ((tUInt32)(DEF_y__h1517)))));
  DEF_rr__h1140 = (tUInt8)((tUInt8)255u & (65535u & (((tUInt32)(DEF_x__h1513)) * ((tUInt32)(DEF_y__h1517)))));
  DEF_y__h1514 = (tUInt8)((tUInt8)255u & (ARG_bfly4_t >> 32u));
  DEF_ri__h1143 = (tUInt8)((tUInt8)255u & (65535u & (((tUInt32)(DEF_x__h1513)) * ((tUInt32)(DEF_y__h1514)))));
  DEF_ii__h1141 = (tUInt8)((tUInt8)255u & (65535u & (((tUInt32)(DEF_x__h1516)) * ((tUInt32)(DEF_y__h1514)))));
  DEF_y__h1525 = (tUInt8)((tUInt8)255u & (ARG_bfly4_t >> 24u));
  DEF_ir__h1288 = (tUInt8)((tUInt8)255u & (65535u & (((tUInt32)(DEF_x__h1524)) * ((tUInt32)(DEF_y__h1525)))));
  DEF_rr__h1286 = (tUInt8)((tUInt8)255u & (65535u & (((tUInt32)(DEF_x__h1521)) * ((tUInt32)(DEF_y__h1525)))));
  DEF_y__h1522 = (tUInt8)((tUInt8)255u & (ARG_bfly4_t >> 16u));
  DEF_ri__h1289 = (tUInt8)((tUInt8)255u & (65535u & (((tUInt32)(DEF_x__h1521)) * ((tUInt32)(DEF_y__h1522)))));
  DEF_ii__h1287 = (tUInt8)((tUInt8)255u & (65535u & (((tUInt32)(DEF_x__h1524)) * ((tUInt32)(DEF_y__h1522)))));
  DEF_y__h1511 = (tUInt8)((tUInt8)255u & (ARG_bfly4_t >> 8u));
  DEF_ir__h834 = (tUInt8)((tUInt8)255u & (65535u & (((tUInt32)(DEF_x__h1510)) * ((tUInt32)(DEF_y__h1511)))));
  DEF_rr__h832 = (tUInt8)((tUInt8)255u & (65535u & (((tUInt32)(DEF_x__h1507)) * ((tUInt32)(DEF_y__h1511)))));
  DEF_y__h1508 = (tUInt8)((tUInt8)255u & ARG_bfly4_t);
  DEF_ri__h835 = (tUInt8)((tUInt8)255u & (65535u & (((tUInt32)(DEF_x__h1507)) * ((tUInt32)(DEF_y__h1508)))));
  DEF_ii__h833 = (tUInt8)((tUInt8)255u & (65535u & (((tUInt32)(DEF_x__h1510)) * ((tUInt32)(DEF_y__h1508)))));
  DEF_x__h1519 = (tUInt8)255u & (DEF_ri__h1289 + DEF_ir__h1288);
  DEF_y__h1520 = (tUInt8)255u & (DEF_ri__h1403 + DEF_ir__h1402);
  DEF_y__h1697 = (tUInt8)255u & (DEF_x__h1519 + DEF_y__h1520);
  DEF_y__h1504 = (tUInt8)255u & (DEF_x__h1519 - DEF_y__h1520);
  DEF_x__h1505 = (tUInt8)255u & (DEF_ri__h835 + DEF_ir__h834);
  DEF_y__h1506 = (tUInt8)255u & (DEF_ri__h1143 + DEF_ir__h1142);
  DEF_x__h1696 = (tUInt8)255u & (DEF_x__h1505 + DEF_y__h1506);
  DEF_x__h1695 = (tUInt8)255u & (DEF_x__h1696 - DEF_y__h1697);
  DEF_x__h1503 = (tUInt8)255u & (DEF_x__h1505 - DEF_y__h1506);
  DEF_x__h1502 = (tUInt8)255u & (DEF_x__h1503 - DEF_y__h1504);
  DEF_x__h1784 = (tUInt8)255u & (DEF_x__h1503 + DEF_y__h1504);
  DEF_x__h1676 = (tUInt8)255u & (DEF_rr__h1286 - DEF_ii__h1287);
  DEF_y__h1677 = (tUInt8)255u & (DEF_rr__h1400 - DEF_ii__h1401);
  DEF_y__h1597 = (tUInt8)255u & (DEF_x__h1676 + DEF_y__h1677);
  DEF_y__h1766 = (tUInt8)255u & (DEF_x__h1676 - DEF_y__h1677);
  DEF_x__h1628 = (tUInt8)255u & (DEF_rr__h832 - DEF_ii__h833);
  DEF_y__h1629 = (tUInt8)255u & (DEF_rr__h1140 - DEF_ii__h1141);
  DEF_x__h1596 = (tUInt8)255u & (DEF_x__h1628 + DEF_y__h1629);
  DEF_x__h1566 = (tUInt8)255u & (DEF_x__h1596 - DEF_y__h1597);
  DEF_x__h1765 = (tUInt8)255u & (DEF_x__h1628 - DEF_y__h1629);
  DEF_x__h239 = (tUInt8)255u & (DEF_x__h1765 - DEF_y__h1766);
  DEF_bfly4_x_BITS_15_TO_8_MUL_bfly4_t_BITS_15_TO_8__ETC___d69 = (((((tUInt32)(DEF_x__h239)) << 24u) | (((tUInt32)(DEF_x__h1502)) << 16u)) | (((tUInt32)(DEF_x__h1566)) << 8u)) | (tUInt32)(DEF_x__h1695);
  DEF_x__h1735 = (tUInt8)255u & (DEF_x__h1765 + DEF_y__h1766);
  DEF_bfly4_x_BITS_15_TO_8_MUL_bfly4_t_BITS_15_TO_8__ETC___d72 = 65535u & ((((tUInt32)(DEF_x__h1735)) << 8u) | (tUInt32)(DEF_x__h1784));
  DEF_x__h1869 = (tUInt8)255u & (DEF_x__h1696 + DEF_y__h1697);
  DEF_x__h1820 = (tUInt8)255u & (DEF_x__h1596 + DEF_y__h1597);
  PORT_bfly4 = (((((tUInt64)(DEF_bfly4_x_BITS_15_TO_8_MUL_bfly4_t_BITS_15_TO_8__ETC___d69)) << 32u) | (((tUInt64)(DEF_bfly4_x_BITS_15_TO_8_MUL_bfly4_t_BITS_15_TO_8__ETC___d72)) << 16u)) | (((tUInt64)(DEF_x__h1820)) << 8u)) | (tUInt64)(DEF_x__h1869);
  return PORT_bfly4;
}

tUInt8 MOD_mkBfly4::METH_RDY_bfly4()
{
  tUInt8 DEF_CAN_FIRE_bfly4;
  tUInt8 PORT_RDY_bfly4;
  DEF_CAN_FIRE_bfly4 = (tUInt8)1u;
  PORT_RDY_bfly4 = DEF_CAN_FIRE_bfly4;
  return PORT_RDY_bfly4;
}


/* Reset routines */

void MOD_mkBfly4::reset_RST_N(tUInt8 ARG_rst_in)
{
  PORT_RST_N = ARG_rst_in;
}


/* Static handles to reset routines */


/* Functions for the parent module to register its reset fns */


/* Functions to set the elaborated clock id */

void MOD_mkBfly4::set_clk_0(char const *s)
{
  __clk_handle_0 = bk_get_or_define_clock(sim_hdl, s);
}


/* State dumping routine */
void MOD_mkBfly4::dump_state(unsigned int indent)
{
}


/* VCD dumping routines */

unsigned int MOD_mkBfly4::dump_VCD_defs(unsigned int levels)
{
  vcd_write_scope_start(sim_hdl, inst_name);
  vcd_num = vcd_reserve_ids(sim_hdl, 1u);
  unsigned int num = vcd_num;
  for (unsigned int clk = 0u; clk < bk_num_clocks(sim_hdl); ++clk)
    vcd_add_clock_def(sim_hdl, this, bk_clock_name(sim_hdl, clk), bk_clock_vcd_num(sim_hdl, clk));
  vcd_write_def(sim_hdl, bk_clock_vcd_num(sim_hdl, __clk_handle_0), "CLK", 1u);
  vcd_write_def(sim_hdl, num++, "RST_N", 1u);
  vcd_write_scope_end(sim_hdl);
  return num;
}

void MOD_mkBfly4::dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkBfly4 &backing)
{
  vcd_defs(dt, backing);
}

void MOD_mkBfly4::vcd_defs(tVCDDumpType dt, MOD_mkBfly4 &backing)
{
  unsigned int num = vcd_num;
  if (dt == VCD_DUMP_XS)
  {
    vcd_write_x(sim_hdl, num++, 1u);
  }
  else
    if (dt == VCD_DUMP_CHANGES)
    {
      if ((backing.PORT_RST_N) != PORT_RST_N)
      {
	vcd_write_val(sim_hdl, num, PORT_RST_N, 1u);
	backing.PORT_RST_N = PORT_RST_N;
      }
      ++num;
    }
    else
    {
      vcd_write_val(sim_hdl, num++, PORT_RST_N, 1u);
      backing.PORT_RST_N = PORT_RST_N;
    }
}
